
Project_Chloe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007588  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007760  08007760  00008760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a0  080077a0  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077a8  080077a8  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a8  080077a8  000087a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077ac  080077ac  000087ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080077b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  080077bc  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080077bc  000092dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173f4  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6b  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  000231a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f91  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5be  00000000  00000000  000254f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a60  00000000  00000000  00043ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c563d  00000000  00000000  0005c517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005490  00000000  00000000  00121b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00127028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007748 	.word	0x08007748

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007748 	.word	0x08007748

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <begin_init>:
#include "main.h"
#include <stdarg.h> //librairie qui permet de coder des fonctions à nombre variable de paramètres
#include <stdint.h>


int begin_init() {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af02      	add	r7, sp, #8

	//prepareForDataRead()
	send_data_init_I2C(1, kOffsetData);
 800050e:	2104      	movs	r1, #4
 8000510:	2001      	movs	r0, #1
 8000512:	f000 f825 	bl	8000560 <send_data_init_I2C>

	//setMode
    send_data_init_I2C(3, kOffsetCommand, kCommandMode, 3, 8, 0);//mode diff : 3, mode raw : 1, mode centroid : 0
 8000516:	2300      	movs	r3, #0
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2308      	movs	r3, #8
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2303      	movs	r3, #3
 8000520:	2201      	movs	r2, #1
 8000522:	2100      	movs	r1, #0
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f81b 	bl	8000560 <send_data_init_I2C>

     //setScanSettings()
	send_data_init_I2C(4, kOffsetCommand, kCommandScanSettings, 0, 11); // speed and resolution
 800052a:	230b      	movs	r3, #11
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2202      	movs	r2, #2
 8000532:	2100      	movs	r1, #0
 8000534:	2004      	movs	r0, #4
 8000536:	f000 f813 	bl	8000560 <send_data_init_I2C>

	//updateBaseline()
    //send_data_init_I2C(2, kOffsetCommand, kCommandBaselineUpdate);
    //CSD_InitializeBaselines();

    send_data_init_I2C(4, kOffsetCommand, kCommandeAutoScanTimer, 16, 10); // 16*10 = counter of 160
 800053a:	230a      	movs	r3, #10
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2310      	movs	r3, #16
 8000540:	220e      	movs	r2, #14
 8000542:	2100      	movs	r1, #0
 8000544:	2004      	movs	r0, #4
 8000546:	f000 f80b 	bl	8000560 <send_data_init_I2C>
    // 32 000 / 160 = 200Hz so 5ms for Scan timing period

	//setPrescaler()
    send_data_init_I2C(3 , kOffsetCommand, kCommandPrescaler, 0x01); // prescaler at 0x01 for the value 2
 800054a:	2301      	movs	r3, #1
 800054c:	2203      	movs	r2, #3
 800054e:	2100      	movs	r1, #0
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f805 	bl	8000560 <send_data_init_I2C>

    return 0;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <send_data_init_I2C>:

int send_data_init_I2C (int counter, ...) { // prend un nombre variable de paramètre
 8000560:	b40f      	push	{r0, r1, r2, r3}
 8000562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af02      	add	r7, sp, #8
 800056a:	466b      	mov	r3, sp
 800056c:	4698      	mov	r8, r3
	va_list args;
	va_start(args, counter); // initialise l'allocation mémoire pour la macro va_list
 800056e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000572:	603b      	str	r3, [r7, #0]


	//Filling of the transmit buffer
	uint8_t sendBuf[counter];
 8000574:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8000576:	1e73      	subs	r3, r6, #1
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4632      	mov	r2, r6
 800057c:	2300      	movs	r3, #0
 800057e:	4614      	mov	r4, r2
 8000580:	461d      	mov	r5, r3
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	00eb      	lsls	r3, r5, #3
 800058c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000590:	00e2      	lsls	r2, r4, #3
 8000592:	4632      	mov	r2, r6
 8000594:	2300      	movs	r3, #0
 8000596:	4610      	mov	r0, r2
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 0200 	mov.w	r2, #0
 800059e:	f04f 0300 	mov.w	r3, #0
 80005a2:	00cb      	lsls	r3, r1, #3
 80005a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005a8:	00c2      	lsls	r2, r0, #3
 80005aa:	4633      	mov	r3, r6
 80005ac:	3307      	adds	r3, #7
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	ebad 0d03 	sub.w	sp, sp, r3
 80005b6:	ab02      	add	r3, sp, #8
 80005b8:	3300      	adds	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i<counter; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00c      	b.n	80005dc <send_data_init_I2C+0x7c>
		sendBuf[i] = va_arg(args, int);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	1d1a      	adds	r2, r3, #4
 80005c6:	603a      	str	r2, [r7, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b2d9      	uxtb	r1, r3
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	4413      	add	r3, r2
 80005d2:	460a      	mov	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<counter; i++) {
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbee      	blt.n	80005c2 <send_data_init_I2C+0x62>
	}
	va_end(args);

	uint32_t startTime = HAL_GetTick();
 80005e4:	f000 ff6c 	bl	80014c0 <HAL_GetTick>
 80005e8:	60b8      	str	r0, [r7, #8]
    int ret = HAL_I2C_Master_Transmit(&hi2c1, i2cAddress, sendBuf, sizeof(sendBuf), kTimeout);
 80005ea:	b2b3      	uxth	r3, r6
 80005ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	2170      	movs	r1, #112	@ 0x70
 80005f6:	480d      	ldr	r0, [pc, #52]	@ (800062c <send_data_init_I2C+0xcc>)
 80005f8:	f001 fe16 	bl	8002228 <HAL_I2C_Master_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	607b      	str	r3, [r7, #4]
    while ((HAL_GetTick()-startTime)<25) {
 8000600:	bf00      	nop
 8000602:	f000 ff5d 	bl	80014c0 <HAL_GetTick>
 8000606:	4602      	mov	r2, r0
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	2b18      	cmp	r3, #24
 800060e:	d9f8      	bls.n	8000602 <send_data_init_I2C+0xa2>
    	//on attend sans utiliser de delai
    }
    if(HAL_OK != ret) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <send_data_init_I2C+0xba>

	  return 1;
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <send_data_init_I2C+0xbc>
    }
    return 0;
 800061a:	2300      	movs	r3, #0
 800061c:	46c5      	mov	sp, r8
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000628:	b004      	add	sp, #16
 800062a:	4770      	bx	lr
 800062c:	200000cc 	.word	0x200000cc

08000630 <receive_data>:

int receive_data(uint8_t receiveDataBuffer[]) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]

  uint32_t startTime = HAL_GetTick();
 8000638:	f000 ff42 	bl	80014c0 <HAL_GetTick>
 800063c:	60f8      	str	r0, [r7, #12]
  int ret = HAL_I2C_Master_Receive(&hi2c1, i2cAddress, receiveDataBuffer, SizeData, kTimeout);
 800063e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2340      	movs	r3, #64	@ 0x40
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	2170      	movs	r1, #112	@ 0x70
 800064a:	480e      	ldr	r0, [pc, #56]	@ (8000684 <receive_data+0x54>)
 800064c:	f001 ff04 	bl	8002458 <HAL_I2C_Master_Receive>
 8000650:	4603      	mov	r3, r0
 8000652:	60bb      	str	r3, [r7, #8]
  while(ret != HAL_OK);
 8000654:	bf00      	nop
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1fc      	bne.n	8000656 <receive_data+0x26>
  while ((HAL_GetTick() - startTime)<25) {
 800065c:	bf00      	nop
 800065e:	f000 ff2f 	bl	80014c0 <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	2b18      	cmp	r3, #24
 800066a:	d9f8      	bls.n	800065e <receive_data+0x2e>
    	//on attend sans utiliser de delai
    }
  if(ret != HAL_OK) {
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d003      	beq.n	800067a <receive_data+0x4a>
	Error_Handler();
 8000672:	f000 fc8b 	bl	8000f8c <Error_Handler>
    return 1;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <receive_data+0x4c>
  }
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000cc 	.word	0x200000cc

08000688 <led_set_RGBW>:

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
  return ((uint16_t)x * scale) >> 8;
}

void led_set_RGBW(uint8_t index, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 8000688:	b490      	push	{r4, r7}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4604      	mov	r4, r0
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4623      	mov	r3, r4
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	4603      	mov	r3, r0
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	460b      	mov	r3, r1
 80006a0:	717b      	strb	r3, [r7, #5]
 80006a2:	4613      	mov	r3, r2
 80006a4:	713b      	strb	r3, [r7, #4]
	rgb_array[4 * index    ] = g;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <led_set_RGBW+0x58>)
 80006ac:	797a      	ldrb	r2, [r7, #5]
 80006ae:	54ca      	strb	r2, [r1, r3]
	rgb_array[4 * index + 1] = r;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	3301      	adds	r3, #1
 80006b6:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <led_set_RGBW+0x58>)
 80006b8:	79ba      	ldrb	r2, [r7, #6]
 80006ba:	54ca      	strb	r2, [r1, r3]
	rgb_array[4 * index + 2] = b;
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	3302      	adds	r3, #2
 80006c2:	4907      	ldr	r1, [pc, #28]	@ (80006e0 <led_set_RGBW+0x58>)
 80006c4:	793a      	ldrb	r2, [r7, #4]
 80006c6:	54ca      	strb	r2, [r1, r3]
	rgb_array[4 * index + 3] = w;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	3303      	adds	r3, #3
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <led_set_RGBW+0x58>)
 80006d0:	7c3a      	ldrb	r2, [r7, #16]
 80006d2:	54ca      	strb	r2, [r1, r3]
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc90      	pop	{r4, r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000028 	.word	0x20000028

080006e4 <led_render>:
		}
		//led_set_RGBW(i, r_buffer[i],g_buffer[i], b_buffer[i], w_buffer[i]);
	}
}

void led_render() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  if(wr_buffer_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 80006ea:	4b5f      	ldr	r3, [pc, #380]	@ (8000868 <led_render+0x184>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d105      	bne.n	80006fe <led_render+0x1a>
 80006f2:	4b5e      	ldr	r3, [pc, #376]	@ (800086c <led_render+0x188>)
 80006f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d014      	beq.n	8000728 <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < Size_buffer; ++i) wr_buffer[i] = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e006      	b.n	8000712 <led_render+0x2e>
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a5a      	ldr	r2, [pc, #360]	@ (8000870 <led_render+0x18c>)
 8000708:	2100      	movs	r1, #0
 800070a:	54d1      	strb	r1, [r2, r3]
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3301      	adds	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b3f      	cmp	r3, #63	@ 0x3f
 8000716:	d9f5      	bls.n	8000704 <led_render+0x20>
    wr_buffer_p = 0;
 8000718:	4b53      	ldr	r3, [pc, #332]	@ (8000868 <led_render+0x184>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800071e:	2100      	movs	r1, #0
 8000720:	4854      	ldr	r0, [pc, #336]	@ (8000874 <led_render+0x190>)
 8000722:	f004 fb8d 	bl	8004e40 <HAL_TIM_PWM_Stop_DMA>
    return;
 8000726:	e09b      	b.n	8000860 <led_render+0x17c>
  }
  // Ooh boi the first data buffer half (and the second!)
	for(uint_fast8_t i = 0; i < 8; ++i) {
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	e08b      	b.n	8000846 <led_render+0x162>
	  wr_buffer[i     ] = PWM_LO << (((rgb_array[0] << i) & 0x80) > 0);
 800072e:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <led_render+0x194>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	2b00      	cmp	r3, #0
 8000740:	dd01      	ble.n	8000746 <led_render+0x62>
 8000742:	2124      	movs	r1, #36	@ 0x24
 8000744:	e000      	b.n	8000748 <led_render+0x64>
 8000746:	2112      	movs	r1, #18
 8000748:	4a49      	ldr	r2, [pc, #292]	@ (8000870 <led_render+0x18c>)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4413      	add	r3, r2
 800074e:	460a      	mov	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
	  wr_buffer[i +  8] = PWM_LO << (((rgb_array[1] << i) & 0x80) > 0);
 8000752:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <led_render+0x194>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	2b00      	cmp	r3, #0
 8000764:	dd01      	ble.n	800076a <led_render+0x86>
 8000766:	2124      	movs	r1, #36	@ 0x24
 8000768:	e000      	b.n	800076c <led_render+0x88>
 800076a:	2112      	movs	r1, #18
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	3308      	adds	r3, #8
 8000770:	4a3f      	ldr	r2, [pc, #252]	@ (8000870 <led_render+0x18c>)
 8000772:	54d1      	strb	r1, [r2, r3]
	  wr_buffer[i + 16] = PWM_LO << (((rgb_array[2] << i) & 0x80) > 0);
 8000774:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <led_render+0x194>)
 8000776:	789b      	ldrb	r3, [r3, #2]
 8000778:	461a      	mov	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd01      	ble.n	800078c <led_render+0xa8>
 8000788:	2124      	movs	r1, #36	@ 0x24
 800078a:	e000      	b.n	800078e <led_render+0xaa>
 800078c:	2112      	movs	r1, #18
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3310      	adds	r3, #16
 8000792:	4a37      	ldr	r2, [pc, #220]	@ (8000870 <led_render+0x18c>)
 8000794:	54d1      	strb	r1, [r2, r3]
	  wr_buffer[i + 24] = PWM_LO << (((rgb_array[3] << i) & 0x80) > 0);
 8000796:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <led_render+0x194>)
 8000798:	78db      	ldrb	r3, [r3, #3]
 800079a:	461a      	mov	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dd01      	ble.n	80007ae <led_render+0xca>
 80007aa:	2124      	movs	r1, #36	@ 0x24
 80007ac:	e000      	b.n	80007b0 <led_render+0xcc>
 80007ae:	2112      	movs	r1, #18
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3318      	adds	r3, #24
 80007b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000870 <led_render+0x18c>)
 80007b6:	54d1      	strb	r1, [r2, r3]
	  wr_buffer[i + 32] = PWM_LO << (((rgb_array[4] << i) & 0x80) > 0);
 80007b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <led_render+0x194>)
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	461a      	mov	r2, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dd01      	ble.n	80007d0 <led_render+0xec>
 80007cc:	2124      	movs	r1, #36	@ 0x24
 80007ce:	e000      	b.n	80007d2 <led_render+0xee>
 80007d0:	2112      	movs	r1, #18
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	3320      	adds	r3, #32
 80007d6:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <led_render+0x18c>)
 80007d8:	54d1      	strb	r1, [r2, r3]
	  wr_buffer[i + 40] = PWM_LO << (((rgb_array[5] << i) & 0x80) > 0);
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <led_render+0x194>)
 80007dc:	795b      	ldrb	r3, [r3, #5]
 80007de:	461a      	mov	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dd01      	ble.n	80007f2 <led_render+0x10e>
 80007ee:	2124      	movs	r1, #36	@ 0x24
 80007f0:	e000      	b.n	80007f4 <led_render+0x110>
 80007f2:	2112      	movs	r1, #18
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	3328      	adds	r3, #40	@ 0x28
 80007f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000870 <led_render+0x18c>)
 80007fa:	54d1      	strb	r1, [r2, r3]
	  wr_buffer[i + 48] = PWM_LO << (((rgb_array[6] << i) & 0x80) > 0);
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <led_render+0x194>)
 80007fe:	799b      	ldrb	r3, [r3, #6]
 8000800:	461a      	mov	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd01      	ble.n	8000814 <led_render+0x130>
 8000810:	2124      	movs	r1, #36	@ 0x24
 8000812:	e000      	b.n	8000816 <led_render+0x132>
 8000814:	2112      	movs	r1, #18
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3330      	adds	r3, #48	@ 0x30
 800081a:	4a15      	ldr	r2, [pc, #84]	@ (8000870 <led_render+0x18c>)
 800081c:	54d1      	strb	r1, [r2, r3]
	  wr_buffer[i + 56] = PWM_LO << (((rgb_array[7] << i) & 0x80) > 0);
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <led_render+0x194>)
 8000820:	79db      	ldrb	r3, [r3, #7]
 8000822:	461a      	mov	r2, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	2b00      	cmp	r3, #0
 8000830:	dd01      	ble.n	8000836 <led_render+0x152>
 8000832:	2124      	movs	r1, #36	@ 0x24
 8000834:	e000      	b.n	8000838 <led_render+0x154>
 8000836:	2112      	movs	r1, #18
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3338      	adds	r3, #56	@ 0x38
 800083c:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <led_render+0x18c>)
 800083e:	54d1      	strb	r1, [r2, r3]
	for(uint_fast8_t i = 0; i < 8; ++i) {
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b07      	cmp	r3, #7
 800084a:	f67f af70 	bls.w	800072e <led_render+0x4a>
  }

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buffer, 64);
 800084e:	2340      	movs	r3, #64	@ 0x40
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <led_render+0x18c>)
 8000852:	2100      	movs	r1, #0
 8000854:	4807      	ldr	r0, [pc, #28]	@ (8000874 <led_render+0x190>)
 8000856:	f004 f8db 	bl	8004a10 <HAL_TIM_PWM_Start_DMA>
  wr_buffer_p = 2; // Since we're ready for the next buffer
 800085a:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <led_render+0x184>)
 800085c:	2202      	movs	r2, #2
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000c8 	.word	0x200000c8
 800086c:	2000016c 	.word	0x2000016c
 8000870:	20000088 	.word	0x20000088
 8000874:	20000120 	.word	0x20000120
 8000878:	20000028 	.word	0x20000028

0800087c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buffer_p < NUM_LED) {
 8000884:	4b41      	ldr	r3, [pc, #260]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b17      	cmp	r3, #23
 800088a:	d862      	bhi.n	8000952 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd6>
    // We're in. Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e056      	b.n	8000940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc4>
    	wr_buffer[i     ] = PWM_LO << (((rgb_array[4 * wr_buffer_p    ] << i) & 0x80) > 0);
 8000892:	4b3e      	ldr	r3, [pc, #248]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4a3d      	ldr	r2, [pc, #244]	@ (8000990 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dd01      	ble.n	80008b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x34>
 80008ac:	2124      	movs	r1, #36	@ 0x24
 80008ae:	e000      	b.n	80008b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x36>
 80008b0:	2112      	movs	r1, #18
 80008b2:	4a38      	ldr	r2, [pc, #224]	@ (8000994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	460a      	mov	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
    	wr_buffer[i +  8] = PWM_LO << (((rgb_array[4 * wr_buffer_p + 1] << i) & 0x80) > 0);
 80008bc:	4b33      	ldr	r3, [pc, #204]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 80008c6:	5cd3      	ldrb	r3, [r2, r3]
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd01      	ble.n	80008dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x60>
 80008d8:	2124      	movs	r1, #36	@ 0x24
 80008da:	e000      	b.n	80008de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x62>
 80008dc:	2112      	movs	r1, #18
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3308      	adds	r3, #8
 80008e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 80008e4:	54d1      	strb	r1, [r2, r3]
    	wr_buffer[i + 16] = PWM_LO << (((rgb_array[4 * wr_buffer_p + 2] << i) & 0x80) > 0);
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	3302      	adds	r3, #2
 80008ee:	4a28      	ldr	r2, [pc, #160]	@ (8000990 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	461a      	mov	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fe:	2b00      	cmp	r3, #0
 8000900:	dd01      	ble.n	8000906 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8a>
 8000902:	2124      	movs	r1, #36	@ 0x24
 8000904:	e000      	b.n	8000908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>
 8000906:	2112      	movs	r1, #18
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3310      	adds	r3, #16
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 800090e:	54d1      	strb	r1, [r2, r3]
    	wr_buffer[i + 24] = PWM_LO << (((rgb_array[4 * wr_buffer_p + 3] << i) & 0x80) > 0);
 8000910:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	3303      	adds	r3, #3
 8000918:	4a1d      	ldr	r2, [pc, #116]	@ (8000990 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 800091a:	5cd3      	ldrb	r3, [r2, r3]
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd01      	ble.n	8000930 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb4>
 800092c:	2124      	movs	r1, #36	@ 0x24
 800092e:	e000      	b.n	8000932 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb6>
 8000930:	2112      	movs	r1, #18
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3318      	adds	r3, #24
 8000936:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 8000938:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b07      	cmp	r3, #7
 8000944:	d9a5      	bls.n	8000892 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buffer_p++;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 800094e:	6013      	str	r3, [r2, #0]
    // Last two transfers are resets. SK6812: 64 * 1.25 us = 80 us == good enough reset
    // First half reset zero fill
	  for(uint8_t i = 0; i < (Size_buffer/2); ++i) wr_buffer[i] = 0;
	  wr_buffer_p++;
  }
}
 8000950:	e015      	b.n	800097e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x102>
  } else if (wr_buffer_p < NUM_LED + 2) {
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b19      	cmp	r3, #25
 8000958:	d811      	bhi.n	800097e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x102>
	  for(uint8_t i = 0; i < (Size_buffer/2); ++i) wr_buffer[i] = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	72fb      	strb	r3, [r7, #11]
 800095e:	e006      	b.n	800096e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf2>
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	4a0c      	ldr	r2, [pc, #48]	@ (8000994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x118>)
 8000964:	2100      	movs	r1, #0
 8000966:	54d1      	strb	r1, [r2, r3]
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	3301      	adds	r3, #1
 800096c:	72fb      	strb	r3, [r7, #11]
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	2b1f      	cmp	r3, #31
 8000972:	d9f5      	bls.n	8000960 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
	  wr_buffer_p++;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 800097c:	6013      	str	r3, [r2, #0]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200000c8 	.word	0x200000c8
 8000990:	20000028 	.word	0x20000028
 8000994:	20000088 	.word	0x20000088

08000998 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buffer_p < NUM_LED) {
 80009a0:	4b43      	ldr	r3, [pc, #268]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b17      	cmp	r3, #23
 80009a6:	d861      	bhi.n	8000a6c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
    // We're in. Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e055      	b.n	8000a5a <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
    	wr_buffer[i + 32] = PWM_LO << (((rgb_array[4 * wr_buffer_p    ] << i) & 0x80) > 0);
 80009ae:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	461a      	mov	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dd01      	ble.n	80009cc <HAL_TIM_PWM_PulseFinishedCallback+0x34>
 80009c8:	2124      	movs	r1, #36	@ 0x24
 80009ca:	e000      	b.n	80009ce <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 80009cc:	2112      	movs	r1, #18
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3320      	adds	r3, #32
 80009d2:	4a39      	ldr	r2, [pc, #228]	@ (8000ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 80009d4:	54d1      	strb	r1, [r2, r3]
    	wr_buffer[i + 40] = PWM_LO << (((rgb_array[4 * wr_buffer_p + 1] << i) & 0x80) > 0);
 80009d6:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	3301      	adds	r3, #1
 80009de:	4a35      	ldr	r2, [pc, #212]	@ (8000ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dd01      	ble.n	80009f6 <HAL_TIM_PWM_PulseFinishedCallback+0x5e>
 80009f2:	2124      	movs	r1, #36	@ 0x24
 80009f4:	e000      	b.n	80009f8 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
 80009f6:	2112      	movs	r1, #18
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3328      	adds	r3, #40	@ 0x28
 80009fc:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 80009fe:	54d1      	strb	r1, [r2, r3]
    	wr_buffer[i + 48] = PWM_LO << (((rgb_array[4 * wr_buffer_p + 2] << i) & 0x80) > 0);
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	4a2a      	ldr	r2, [pc, #168]	@ (8000ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dd01      	ble.n	8000a20 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
 8000a1c:	2124      	movs	r1, #36	@ 0x24
 8000a1e:	e000      	b.n	8000a22 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
 8000a20:	2112      	movs	r1, #18
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3330      	adds	r3, #48	@ 0x30
 8000a26:	4a24      	ldr	r2, [pc, #144]	@ (8000ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000a28:	54d1      	strb	r1, [r2, r3]
    	wr_buffer[i + 56] = PWM_LO << (((rgb_array[4 * wr_buffer_p + 3] << i) & 0x80) > 0);
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	3303      	adds	r3, #3
 8000a32:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dd01      	ble.n	8000a4a <HAL_TIM_PWM_PulseFinishedCallback+0xb2>
 8000a46:	2124      	movs	r1, #36	@ 0x24
 8000a48:	e000      	b.n	8000a4c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 8000a4a:	2112      	movs	r1, #18
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3338      	adds	r3, #56	@ 0x38
 8000a50:	4a19      	ldr	r2, [pc, #100]	@ (8000ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000a52:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d9a6      	bls.n	80009ae <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buffer_p++;
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a68:	6013      	str	r3, [r2, #0]
  else {
    // We're done. Lean back and until next time!
	  wr_buffer_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}//*/
 8000a6a:	e01d      	b.n	8000aa8 <HAL_TIM_PWM_PulseFinishedCallback+0x110>
  else if (wr_buffer_p < NUM_LED + 2) {
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b19      	cmp	r3, #25
 8000a72:	d812      	bhi.n	8000a9a <HAL_TIM_PWM_PulseFinishedCallback+0x102>
    for(uint8_t i = (Size_buffer/2); i < Size_buffer; ++i) wr_buffer[i] = 0;
 8000a74:	2320      	movs	r3, #32
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	e006      	b.n	8000a88 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	54d1      	strb	r1, [r2, r3]
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	3301      	adds	r3, #1
 8000a86:	72fb      	strb	r3, [r7, #11]
 8000a88:	7afb      	ldrb	r3, [r7, #11]
 8000a8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8c:	d9f5      	bls.n	8000a7a <HAL_TIM_PWM_PulseFinishedCallback+0xe2>
    ++wr_buffer_p;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a96:	6013      	str	r3, [r2, #0]
}//*/
 8000a98:	e006      	b.n	8000aa8 <HAL_TIM_PWM_PulseFinishedCallback+0x110>
	  wr_buffer_p = 0;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 8000aa4:	f004 f9cc 	bl	8004e40 <HAL_TIM_PWM_Stop_DMA>
}//*/
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000c8 	.word	0x200000c8
 8000ab4:	20000028 	.word	0x20000028
 8000ab8:	20000088 	.word	0x20000088
 8000abc:	20000120 	.word	0x20000120

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 fc96 	bl	80013f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f86f 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 f9f1 	bl	8000eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad2:	f000 f9c5 	bl	8000e60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ad6:	f000 f977 	bl	8000dc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ada:	f000 f8bf 	bl	8000c5c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ade:	f000 f8fd 	bl	8000cdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  begin_init();
 8000ae2:	f7ff fd11 	bl	8000508 <begin_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  receive_data(receiveBuffer);
 8000ae6:	482d      	ldr	r0, [pc, #180]	@ (8000b9c <main+0xdc>)
 8000ae8:	f7ff fda2 	bl	8000630 <receive_data>
	  	  Index_led[pad] = (int) (Angle_Buffer[pad]*1/15); // prendre la valeur entière correspondent au numéro de la led dont l'angle correspond (pas de 15deg)
	  	  led_set_RGBW(Index_led[pad], 0, 0, 200, 0); //rouge, vert, bleu, blanc

	 }//*/

  	  for (int pad = 2; pad < (SizeData/2-2); pad+=1) { // start at 2 because of Offset : from 2 to 29
 8000aec:	2302      	movs	r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e04b      	b.n	8000b8a <main+0xca>

  	  	  Intensity_Buffer[pad-2] = (receiveBuffer[pad*2]<<8) | receiveBuffer[pad*2+1]; // Concaténation des données de localisation uniquement de deux uint8 en un uint16
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4a29      	ldr	r2, [pc, #164]	@ (8000b9c <main+0xdc>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	3301      	adds	r3, #1
 8000b04:	4925      	ldr	r1, [pc, #148]	@ (8000b9c <main+0xdc>)
 8000b06:	5ccb      	ldrb	r3, [r1, r3]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3b02      	subs	r3, #2
 8000b12:	b291      	uxth	r1, r2
 8000b14:	4a22      	ldr	r2, [pc, #136]	@ (8000ba0 <main+0xe0>)
 8000b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	  	  int angle = (pad-2)*360/27;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3b02      	subs	r3, #2
 8000b1e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <main+0xe4>)
 8000b28:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2c:	10d2      	asrs	r2, r2, #3
 8000b2e:	17db      	asrs	r3, r3, #31
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	60bb      	str	r3, [r7, #8]
  	  	  int led = angle*23/360;
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	4a19      	ldr	r2, [pc, #100]	@ (8000ba8 <main+0xe8>)
 8000b42:	fb82 1203 	smull	r1, r2, r2, r3
 8000b46:	441a      	add	r2, r3
 8000b48:	1212      	asrs	r2, r2, #8
 8000b4a:	17db      	asrs	r3, r3, #31
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	607b      	str	r3, [r7, #4]
  	  	  if (Intensity_Buffer[pad-2]>5) { //  && (pad-2)<=28 si on veux enlever les extras pads
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3b02      	subs	r3, #2
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <main+0xe0>)
 8000b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5a:	2b05      	cmp	r3, #5
 8000b5c:	d909      	bls.n	8000b72 <main+0xb2>
  	  		//led_set_RGBW(led, r_buffer[led],g_buffer[led], b_buffer[led], w_buffer[led]);
  	  		led_set_RGBW(led, 110,20, 0, 0);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	b2d8      	uxtb	r0, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2214      	movs	r2, #20
 8000b6a:	216e      	movs	r1, #110	@ 0x6e
 8000b6c:	f7ff fd8c 	bl	8000688 <led_set_RGBW>
 8000b70:	e008      	b.n	8000b84 <main+0xc4>
  	  	  }
  	  	  else {
  	  		led_set_RGBW(led, 0, 0, 0, 0);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	b2d8      	uxtb	r0, r3
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff fd82 	bl	8000688 <led_set_RGBW>
  	  for (int pad = 2; pad < (SizeData/2-2); pad+=1) { // start at 2 because of Offset : from 2 to 29
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2b1d      	cmp	r3, #29
 8000b8e:	ddb0      	ble.n	8000af2 <main+0x32>
  	  	  }
  	  }//*/s
	  //led_set_all_RGBW(0,0,0,255); //rouge, vert, bleu, blanc

  	  led_render();
 8000b90:	f7ff fda8 	bl	80006e4 <led_render>
  	  HAL_Delay(20);
 8000b94:	2014      	movs	r0, #20
 8000b96:	f000 fc9f 	bl	80014d8 <HAL_Delay>
	  receive_data(receiveBuffer);
 8000b9a:	e7a4      	b.n	8000ae6 <main+0x26>
 8000b9c:	20000260 	.word	0x20000260
 8000ba0:	200002a0 	.word	0x200002a0
 8000ba4:	4bda12f7 	.word	0x4bda12f7
 8000ba8:	b60b60b7 	.word	0xb60b60b7

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2238      	movs	r2, #56	@ 0x38
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 fd98 	bl	80076f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bd2:	f002 fe4d 	bl	8003870 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fee4 	bl	80039d8 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f9b9 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2101      	movs	r1, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 f9e2 	bl	8003ffc <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c3e:	f000 f9a5 	bl	8000f8c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000c48:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <SystemClock_Config+0xac>)
 8000c4a:	f003 fb13 	bl	8004274 <HAL_RCC_MCOConfig>
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	@ 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	00060400 	.word	0x00060400

08000c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <MX_I2C1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_I2C1_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c98:	f001 fa2a 	bl	80020f0 <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 f973 	bl	8000f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000caa:	f002 fd49 	bl	8003740 <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 f96a 	bl	8000f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000cbc:	f002 fd8b 	bl	80037d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 f961 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000cc 	.word	0x200000cc
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	2010091a 	.word	0x2010091a

08000cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d16:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8000d22:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d24:	223b      	movs	r2, #59	@ 0x3b
 8000d26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d34:	4823      	ldr	r0, [pc, #140]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d36:	f003 fdb3 	bl	80048a0 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d40:	f000 f924 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481c      	ldr	r0, [pc, #112]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d52:	f004 fbd1 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d5c:	f000 f916 	bl	8000f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d60:	4818      	ldr	r0, [pc, #96]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d62:	f003 fdf4 	bl	800494e <HAL_TIM_PWM_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d6c:	f000 f90e 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000d80:	f005 fa0c 	bl	800619c <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d8a:	f000 f8ff 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8e:	2360      	movs	r3, #96	@ 0x60
 8000d90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	4807      	ldr	r0, [pc, #28]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000da6:	f004 fa93 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000db0:	f000 f8ec 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <MX_TIM2_Init+0xe8>)
 8000db6:	f000 f9ed 	bl	8001194 <HAL_TIM_MspPostInit>

}
 8000dba:	bf00      	nop
 8000dbc:	3738      	adds	r7, #56	@ 0x38
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000120 	.word	0x20000120

08000dc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <MX_USART2_UART_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000dd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e12:	f005 fa8b 	bl	800632c <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 f8b6 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e24:	f006 fb99 	bl	800755a <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 f8ad 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e36:	f006 fbce 	bl	80075d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 f8a4 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_USART2_UART_Init+0x90>)
 8000e46:	f006 fb4f 	bl	80074e8 <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 f89c 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001cc 	.word	0x200001cc
 8000e5c:	40004400 	.word	0x40004400

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_DMA_Init+0x50>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <MX_DMA_Init+0x50>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_DMA_Init+0x50>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_DMA_Init+0x50>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e82:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <MX_DMA_Init+0x50>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_DMA_Init+0x50>)
 8000e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200b      	movs	r0, #11
 8000e9c:	f000 fc19 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f000 fc30 	bl	8001706 <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a2c      	ldr	r2, [pc, #176]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000ed0:	f043 0320 	orr.w	r3, r3, #32
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a26      	ldr	r2, [pc, #152]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a20      	ldr	r2, [pc, #128]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a1a      	ldr	r2, [pc, #104]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_GPIO_Init+0xcc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f30:	4814      	ldr	r0, [pc, #80]	@ (8000f84 <MX_GPIO_Init+0xd0>)
 8000f32:	f001 f8c5 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_GPIO_Init+0xd4>)
 8000f54:	f000 ff32 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_GPIO_Init+0xd0>)
 8000f72:	f000 ff23 	bl	8001dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48001800 	.word	0x48001800

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <Error_Handler+0x8>

08000f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fce:	f002 fcf3 	bl	80039b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09c      	sub	sp, #112	@ 0x70
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	2244      	movs	r2, #68	@ 0x44
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fb75 	bl	80076f0 <memset>
  if(hi2c->Instance==I2C1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a36      	ldr	r2, [pc, #216]	@ (80010e4 <HAL_I2C_MspInit+0x104>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d164      	bne.n	80010da <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fa4e 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800102a:	f7ff ffaf 	bl	8000f8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a27      	ldr	r2, [pc, #156]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800105e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001062:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001064:	2312      	movs	r3, #18
 8001066:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001070:	2304      	movs	r3, #4
 8001072:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f000 fe9d 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001086:	2312      	movs	r3, #18
 8001088:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108a:	2301      	movs	r3, #1
 800108c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001092:	2304      	movs	r3, #4
 8001094:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800109a:	4619      	mov	r1, r3
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <HAL_I2C_MspInit+0x10c>)
 800109e:	f000 fe8d 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_I2C_MspInit+0x108>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	201f      	movs	r0, #31
 80010c0:	f000 fb07 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010c4:	201f      	movs	r0, #31
 80010c6:	f000 fb1e 	bl	8001706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2020      	movs	r0, #32
 80010d0:	f000 faff 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010d4:	2020      	movs	r0, #32
 80010d6:	f000 fb16 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3770      	adds	r7, #112	@ 0x70
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000400 	.word	0x48000400

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001100:	d13d      	bne.n	800117e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <HAL_TIM_Base_MspInit+0x98>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001106:	4a20      	ldr	r2, [pc, #128]	@ (8001188 <HAL_TIM_Base_MspInit+0x98>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6593      	str	r3, [r2, #88]	@ 0x58
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <HAL_TIM_Base_MspInit+0x98>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 800111c:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <HAL_TIM_Base_MspInit+0xa0>)
 800111e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001122:	2238      	movs	r2, #56	@ 0x38
 8001124:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001128:	2210      	movs	r2, #16
 800112a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 800113a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001148:	2220      	movs	r2, #32
 800114a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001154:	f000 faf2 	bl	800173c <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 800115e:	f7ff ff15 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_TIM_Base_MspInit+0x9c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	201c      	movs	r0, #28
 8001174:	f000 faad 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001178:	201c      	movs	r0, #28
 800117a:	f000 fac4 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	2000016c 	.word	0x2000016c
 8001190:	40020008 	.word	0x40020008

08001194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b4:	d11c      	bne.n	80011f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_TIM_MspPostInit+0x64>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <HAL_TIM_MspPostInit+0x64>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_TIM_MspPostInit+0x64>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ce:	2301      	movs	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011de:	2301      	movs	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f000 fde6 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09a      	sub	sp, #104	@ 0x68
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2244      	movs	r2, #68	@ 0x44
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f006 fa67 	bl	80076f0 <memset>
  if(huart->Instance==USART2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <HAL_UART_MspInit+0xb8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d13e      	bne.n	80012aa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f941 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001244:	f7ff fea2 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124c:	4a1a      	ldr	r2, [pc, #104]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 800124e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001252:	6593      	str	r3, [r2, #88]	@ 0x58
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_UART_MspInit+0xbc>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001278:	230c      	movs	r3, #12
 800127a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2301      	movs	r3, #1
 8001282:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2302      	movs	r3, #2
 8001286:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001288:	2307      	movs	r3, #7
 800128a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001296:	f000 fd91 	bl	8001dbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2026      	movs	r0, #38	@ 0x26
 80012a0:	f000 fa17 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012a4:	2026      	movs	r0, #38	@ 0x26
 80012a6:	f000 fa2e 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3768      	adds	r7, #104	@ 0x68
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40021000 	.word	0x40021000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f8c3 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA1_Channel1_IRQHandler+0x10>)
 8001322:	f000 fbee 	bl	8001b02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000016c 	.word	0x2000016c

08001330 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <TIM2_IRQHandler+0x10>)
 8001336:	f003 fe7b 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000120 	.word	0x20000120

08001344 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <I2C1_EV_IRQHandler+0x10>)
 800134a:	f001 f97b 	bl	8002644 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000cc 	.word	0x200000cc

08001358 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <I2C1_ER_IRQHandler+0x10>)
 800135e:	f001 f98b 	bl	8002678 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000cc 	.word	0x200000cc

0800136c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <USART2_IRQHandler+0x10>)
 8001372:	f005 f82b 	bl	80063cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001cc 	.word	0x200001cc

08001380 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a4:	480d      	ldr	r0, [pc, #52]	@ (80013dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff ffea 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f006 f995 	bl	8007700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff fb73 	bl	8000ac0 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   r0, =_estack
 80013dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e8:	080077b0 	.word	0x080077b0
  ldr r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013f0:	200002dc 	.word	0x200002dc

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>

080013f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f95b 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f80e 	bl	8001428 <HAL_InitTick>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	e001      	b.n	800141c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001418:	f7ff fdbe 	bl	8000f98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141c:	79fb      	ldrb	r3, [r7, #7]

}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_InitTick+0x68>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d022      	beq.n	8001482 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_InitTick+0x6c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <HAL_InitTick+0x68>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001448:	fbb1 f3f3 	udiv	r3, r1, r3
 800144c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f966 	bl	8001722 <HAL_SYSTICK_Config>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10f      	bne.n	800147c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	d809      	bhi.n	8001476 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001462:	2200      	movs	r2, #0
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	f04f 30ff 	mov.w	r0, #4294967295
 800146a:	f000 f932 	bl	80016d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_InitTick+0x70>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e007      	b.n	8001486 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e004      	b.n	8001486 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e001      	b.n	8001486 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000008 	.word	0x20000008
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x20>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a03      	ldr	r2, [pc, #12]	@ (80014b8 <HAL_IncTick+0x1c>)
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200002d8 	.word	0x200002d8
 80014bc:	20000008 	.word	0x20000008

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200002d8 	.word	0x200002d8

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d004      	beq.n	80014fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_Delay+0x40>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fc:	bf00      	nop
 80014fe:	f7ff ffdf 	bl	80014c0 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	429a      	cmp	r2, r3
 800150c:	d8f7      	bhi.n	80014fe <HAL_Delay+0x26>
  {
  }
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	@ (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	@ (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff40 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff33 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa4 	bl	8001678 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e08d      	b.n	800186a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <HAL_DMA_Init+0x138>)
 8001756:	429a      	cmp	r2, r3
 8001758:	d80f      	bhi.n	800177a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <HAL_DMA_Init+0x13c>)
 8001762:	4413      	add	r3, r2
 8001764:	4a45      	ldr	r2, [pc, #276]	@ (800187c <HAL_DMA_Init+0x140>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a42      	ldr	r2, [pc, #264]	@ (8001880 <HAL_DMA_Init+0x144>)
 8001776:	641a      	str	r2, [r3, #64]	@ 0x40
 8001778:	e00e      	b.n	8001798 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b40      	ldr	r3, [pc, #256]	@ (8001884 <HAL_DMA_Init+0x148>)
 8001782:	4413      	add	r3, r2
 8001784:	4a3d      	ldr	r2, [pc, #244]	@ (800187c <HAL_DMA_Init+0x140>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a3c      	ldr	r2, [pc, #240]	@ (8001888 <HAL_DMA_Init+0x14c>)
 8001796:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fa84 	bl	8001cf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017f8:	d102      	bne.n	8001800 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001814:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <HAL_DMA_Init+0x104>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b04      	cmp	r3, #4
 8001824:	d80c      	bhi.n	8001840 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 faa4 	bl	8001d74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	e008      	b.n	8001852 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020407 	.word	0x40020407
 8001878:	bffdfff8 	.word	0xbffdfff8
 800187c:	cccccccd 	.word	0xcccccccd
 8001880:	40020000 	.word	0x40020000
 8001884:	bffdfbf8 	.word	0xbffdfbf8
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Start_IT+0x20>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e066      	b.n	800197a <HAL_DMA_Start_IT+0xee>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d155      	bne.n	800196c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f9c9 	bl	8001c7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 020e 	orr.w	r2, r2, #14
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00f      	b.n	8001924 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0204 	bic.w	r2, r2, #4
 8001912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 020a 	orr.w	r2, r2, #10
 8001922:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800193c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001940:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001958:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e005      	b.n	8001978 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001974:	2302      	movs	r3, #2
 8001976:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001978:	7dfb      	ldrb	r3, [r7, #23]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d005      	beq.n	80019a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2204      	movs	r2, #4
 800199e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e037      	b.n	8001a16 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 020e 	bic.w	r2, r2, #14
 80019b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f003 021f 	and.w	r2, r3, #31
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a0a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a14:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e047      	b.n	8001af8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020e 	bic.w	r2, r2, #14
 8001a76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ab4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00c      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001acc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ad6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
    }
  }
  return status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2204      	movs	r2, #4
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d026      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x7a>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d021      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0204 	bic.w	r2, r2, #4
 8001b54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f003 021f 	and.w	r2, r3, #31
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2104      	movs	r1, #4
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d071      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b7a:	e06c      	b.n	8001c56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2202      	movs	r2, #2
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d02e      	beq.n	8001bee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d029      	beq.n	8001bee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 020a 	bic.w	r2, r2, #10
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	2102      	movs	r1, #2
 8001bce:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d038      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001bec:	e033      	b.n	8001c56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d02a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d025      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020e 	bic.w	r2, r2, #14
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
}
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c6e:	b2db      	uxtb	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ca4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d108      	bne.n	8001cdc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cda:	e007      	b.n	8001cec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d802      	bhi.n	8001d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e001      	b.n	8001d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d14:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3b08      	subs	r3, #8
 8001d22:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40020407 	.word	0x40020407
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020820 	.word	0x40020820
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	40020880 	.word	0x40020880

08001d74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d96:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2201      	movs	r2, #1
 8001da2:	409a      	lsls	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	1000823f 	.word	0x1000823f
 8001db8:	40020940 	.word	0x40020940

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dca:	e15a      	b.n	8002082 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 814c 	beq.w	800207c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d005      	beq.n	8001dfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d130      	bne.n	8001e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e32:	2201      	movs	r2, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 0201 	and.w	r2, r3, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d017      	beq.n	8001e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d123      	bne.n	8001eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3208      	adds	r2, #8
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0203 	and.w	r2, r3, #3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80a6 	beq.w	800207c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f30:	4b5b      	ldr	r3, [pc, #364]	@ (80020a0 <HAL_GPIO_Init+0x2e4>)
 8001f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f34:	4a5a      	ldr	r2, [pc, #360]	@ (80020a0 <HAL_GPIO_Init+0x2e4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f3c:	4b58      	ldr	r3, [pc, #352]	@ (80020a0 <HAL_GPIO_Init+0x2e4>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f48:	4a56      	ldr	r2, [pc, #344]	@ (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f72:	d01f      	beq.n	8001fb4 <HAL_GPIO_Init+0x1f8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d019      	beq.n	8001fb0 <HAL_GPIO_Init+0x1f4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a4b      	ldr	r2, [pc, #300]	@ (80020ac <HAL_GPIO_Init+0x2f0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <HAL_GPIO_Init+0x1f0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_GPIO_Init+0x2f4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_GPIO_Init+0x1ec>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a49      	ldr	r2, [pc, #292]	@ (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a48      	ldr	r2, [pc, #288]	@ (80020b8 <HAL_GPIO_Init+0x2fc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f9c:	2305      	movs	r3, #5
 8001f9e:	e00a      	b.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	e008      	b.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e006      	b.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e004      	b.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_GPIO_Init+0x1fa>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc6:	4937      	ldr	r1, [pc, #220]	@ (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd4:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff8:	4a30      	ldr	r2, [pc, #192]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002022:	4a26      	ldr	r2, [pc, #152]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002028:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <HAL_GPIO_Init+0x300>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_GPIO_Init+0x300>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002076:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f ae9d 	bne.w	8001dcc <HAL_GPIO_Init+0x10>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	48000400 	.word	0x48000400
 80020ac:	48000800 	.word	0x48000800
 80020b0:	48000c00 	.word	0x48000c00
 80020b4:	48001000 	.word	0x48001000
 80020b8:	48001400 	.word	0x48001400
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e08d      	b.n	800221e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe ff62 	bl	8000fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	@ 0x24
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002140:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002150:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e006      	b.n	8002178 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002176:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d108      	bne.n	8002192 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	e007      	b.n	80021a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69d9      	ldr	r1, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	f040 80fd 	bne.w	8002444 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x30>
 8002254:	2302      	movs	r3, #2
 8002256:	e0f6      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002260:	f7ff f92e 	bl	80014c0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2319      	movs	r3, #25
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 ff85 	bl	8003182 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0e1      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2221      	movs	r2, #33	@ 0x21
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2210      	movs	r2, #16
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	893a      	ldrh	r2, [r7, #8]
 80022a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2bff      	cmp	r3, #255	@ 0xff
 80022b2:	d906      	bls.n	80022c2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	22ff      	movs	r2, #255	@ 0xff
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80022ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e007      	b.n	80022d2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d024      	beq.n	8002324 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <HAL_I2C_Master_Transmit+0x228>)
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f001 f97f 	bl	8003620 <I2C_TransferConfig>
 8002322:	e066      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	b2da      	uxtb	r2, r3
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	4b48      	ldr	r3, [pc, #288]	@ (8002450 <HAL_I2C_Master_Transmit+0x228>)
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f001 f974 	bl	8003620 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002338:	e05b      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 ff78 	bl	8003234 <I2C_WaitOnTXISFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07b      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d034      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d130      	bne.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fef1 	bl	8003182 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e04d      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2bff      	cmp	r3, #255	@ 0xff
 80023b2:	d90e      	bls.n	80023d2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	22ff      	movs	r2, #255	@ 0xff
 80023b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f001 f928 	bl	8003620 <I2C_TransferConfig>
 80023d0:	e00f      	b.n	80023f2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f001 f917 	bl	8003620 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d19e      	bne.n	800233a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	6a39      	ldr	r1, [r7, #32]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 ff5e 	bl	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01a      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <HAL_I2C_Master_Transmit+0x22c>)
 8002424:	400b      	ands	r3, r1
 8002426:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	80002000 	.word	0x80002000
 8002454:	fe00e800 	.word	0xfe00e800

08002458 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
 8002468:	4613      	mov	r3, r2
 800246a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	f040 80db 	bne.w	8002630 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2C_Master_Receive+0x30>
 8002484:	2302      	movs	r3, #2
 8002486:	e0d4      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002490:	f7ff f816 	bl	80014c0 <HAL_GetTick>
 8002494:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fe6d 	bl	8003182 <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0bf      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2222      	movs	r2, #34	@ 0x22
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2210      	movs	r2, #16
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2bff      	cmp	r3, #255	@ 0xff
 80024e2:	d90e      	bls.n	8002502 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	22ff      	movs	r2, #255	@ 0xff
 80024e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	4b52      	ldr	r3, [pc, #328]	@ (800263c <HAL_I2C_Master_Receive+0x1e4>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f001 f890 	bl	8003620 <I2C_TransferConfig>
 8002500:	e06d      	b.n	80025de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	b2da      	uxtb	r2, r3
 8002512:	8979      	ldrh	r1, [r7, #10]
 8002514:	4b49      	ldr	r3, [pc, #292]	@ (800263c <HAL_I2C_Master_Receive+0x1e4>)
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f001 f87f 	bl	8003620 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002522:	e05c      	b.n	80025de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	6a39      	ldr	r1, [r7, #32]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 ff0d 	bl	8003348 <I2C_WaitOnRXNEFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e07c      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d034      	beq.n	80025de <HAL_I2C_Master_Receive+0x186>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d130      	bne.n	80025de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	2200      	movs	r2, #0
 8002584:	2180      	movs	r1, #128	@ 0x80
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fdfb 	bl	8003182 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e04d      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2bff      	cmp	r3, #255	@ 0xff
 800259e:	d90e      	bls.n	80025be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	22ff      	movs	r2, #255	@ 0xff
 80025a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f001 f832 	bl	8003620 <I2C_TransferConfig>
 80025bc:	e00f      	b.n	80025de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f001 f821 	bl	8003620 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d19d      	bne.n	8002524 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fe68 	bl	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e01a      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2220      	movs	r2, #32
 8002602:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <HAL_I2C_Master_Receive+0x1e8>)
 8002610:	400b      	ands	r3, r1
 8002612:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	80002400 	.word	0x80002400
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
  }
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00f      	beq.n	80026ba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00f      	beq.n	80026e4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f043 0208 	orr.w	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 030b 	and.w	r3, r3, #11
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fbd5 	bl	8002ed0 <I2C_ITError>
  }
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
 8002762:	4613      	mov	r3, r2
 8002764:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <I2C_Slave_ISR_IT+0x24>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0e2      	b.n	8002998 <I2C_Slave_ISR_IT+0x1ea>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027ee:	6939      	ldr	r1, [r7, #16]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f9b5 	bl	8002b60 <I2C_ITSlaveCplt>
 80027f6:	e0ca      	b.n	800298e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04b      	beq.n	800289a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002808:	2b00      	cmp	r3, #0
 800280a:	d046      	beq.n	800289a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d128      	bne.n	8002868 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b28      	cmp	r3, #40	@ 0x28
 8002820:	d108      	bne.n	8002834 <I2C_Slave_ISR_IT+0x86>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002828:	d104      	bne.n	8002834 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fafb 	bl	8002e28 <I2C_ITListenCplt>
 8002832:	e031      	b.n	8002898 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b29      	cmp	r3, #41	@ 0x29
 800283e:	d10e      	bne.n	800285e <I2C_Slave_ISR_IT+0xb0>
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002846:	d00a      	beq.n	800285e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fc54 	bl	80030fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f926 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
 800285c:	e01c      	b.n	8002898 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2210      	movs	r2, #16
 8002864:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002866:	e08f      	b.n	8002988 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2210      	movs	r2, #16
 800286e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <I2C_Slave_ISR_IT+0xdc>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002888:	d17e      	bne.n	8002988 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	4619      	mov	r1, r3
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fb1d 	bl	8002ed0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002896:	e077      	b.n	8002988 <I2C_Slave_ISR_IT+0x1da>
 8002898:	e076      	b.n	8002988 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02f      	beq.n	8002904 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02a      	beq.n	8002904 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d018      	beq.n	80028ea <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d14b      	bne.n	800298c <I2C_Slave_ISR_IT+0x1de>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028fa:	d047      	beq.n	800298c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f8d3 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002902:	e043      	b.n	800298c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002918:	6939      	ldr	r1, [r7, #16]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f840 	bl	80029a0 <I2C_ITAddrCplt>
 8002920:	e035      	b.n	800298e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d030      	beq.n	800298e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02b      	beq.n	800298e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d018      	beq.n	8002972 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002970:	e00d      	b.n	800298e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002978:	d002      	beq.n	8002980 <I2C_Slave_ISR_IT+0x1d2>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f891 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
 8002986:	e002      	b.n	800298e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800298c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80029b6:	2b28      	cmp	r3, #40	@ 0x28
 80029b8:	d16a      	bne.n	8002a90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80029d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80029f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d138      	bne.n	8002a70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	09db      	lsrs	r3, r3, #7
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	89bb      	ldrh	r3, [r7, #12]
 8002a06:	4053      	eors	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f003 0306 	and.w	r3, r3, #6
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11c      	bne.n	8002a4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d13b      	bne.n	8002aa0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2208      	movs	r2, #8
 8002a34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a3e:	89ba      	ldrh	r2, [r7, #12]
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fe86 	bl	8002756 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a4a:	e029      	b.n	8002aa0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fe15 	bl	8003684 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a62:	89ba      	ldrh	r2, [r7, #12]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe74 	bl	8002756 <HAL_I2C_AddrCallback>
}
 8002a6e:	e017      	b.n	8002aa0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fe05 	bl	8003684 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a82:	89ba      	ldrh	r2, [r7, #12]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fe64 	bl	8002756 <HAL_I2C_AddrCallback>
}
 8002a8e:	e007      	b.n	8002aa0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e00c      	b.n	8002af6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b29      	cmp	r3, #41	@ 0x29
 8002b00:	d112      	bne.n	8002b28 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2228      	movs	r2, #40	@ 0x28
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2221      	movs	r2, #33	@ 0x21
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b10:	2101      	movs	r1, #1
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fdb6 	bl	8003684 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fe04 	bl	800272e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b26:	e017      	b.n	8002b58 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b32:	d111      	bne.n	8002b58 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2228      	movs	r2, #40	@ 0x28
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2222      	movs	r2, #34	@ 0x22
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b42:	2102      	movs	r1, #2
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fd9d 	bl	8003684 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fdf5 	bl	8002742 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b82:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	2b21      	cmp	r3, #33	@ 0x21
 8002b90:	d002      	beq.n	8002b98 <I2C_ITSlaveCplt+0x38>
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	2b29      	cmp	r3, #41	@ 0x29
 8002b96:	d108      	bne.n	8002baa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b98:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fd71 	bl	8003684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2221      	movs	r2, #33	@ 0x21
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba8:	e019      	b.n	8002bde <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	2b22      	cmp	r3, #34	@ 0x22
 8002bae:	d002      	beq.n	8002bb6 <I2C_ITSlaveCplt+0x56>
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bb4:	d108      	bne.n	8002bc8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002bb6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fd62 	bl	8003684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2222      	movs	r2, #34	@ 0x22
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc6:	e00a      	b.n	8002bde <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	2b28      	cmp	r3, #40	@ 0x28
 8002bcc:	d107      	bne.n	8002bde <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002bce:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fd56 	bl	8003684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b89      	ldr	r3, [pc, #548]	@ (8002e20 <I2C_ITSlaveCplt+0x2c0>)
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa7d 	bl	80030fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d013      	beq.n	8002c36 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01f      	beq.n	8002c66 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c34:	e017      	b.n	8002c66 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0304 	bic.w	r3, r3, #4
 8002c76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d049      	beq.n	8002d66 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d044      	beq.n	8002d66 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d128      	bne.n	8002d38 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b28      	cmp	r3, #40	@ 0x28
 8002cf0:	d108      	bne.n	8002d04 <I2C_ITSlaveCplt+0x1a4>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cf8:	d104      	bne.n	8002d04 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cfa:	6979      	ldr	r1, [r7, #20]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f893 	bl	8002e28 <I2C_ITListenCplt>
 8002d02:	e030      	b.n	8002d66 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b29      	cmp	r3, #41	@ 0x29
 8002d0e:	d10e      	bne.n	8002d2e <I2C_ITSlaveCplt+0x1ce>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d16:	d00a      	beq.n	8002d2e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f9ec 	bl	80030fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff febe 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
 8002d2c:	e01b      	b.n	8002d66 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	61da      	str	r2, [r3, #28]
 8002d36:	e016      	b.n	8002d66 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <I2C_ITSlaveCplt+0x1fa>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d58:	d105      	bne.n	8002d66 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8b5 	bl	8002ed0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d010      	beq.n	8002d9e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8a4 	bl	8002ed0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b28      	cmp	r3, #40	@ 0x28
 8002d92:	d141      	bne.n	8002e18 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d94:	6979      	ldr	r1, [r7, #20]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f846 	bl	8002e28 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d9c:	e03c      	b.n	8002e18 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002da6:	d014      	beq.n	8002dd2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe7d 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e24 <I2C_ITSlaveCplt+0x2c4>)
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fcd1 	bl	8002772 <HAL_I2C_ListenCpltCallback>
}
 8002dd0:	e022      	b.n	8002e18 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b22      	cmp	r3, #34	@ 0x22
 8002ddc:	d10e      	bne.n	8002dfc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fca4 	bl	8002742 <HAL_I2C_SlaveRxCpltCallback>
}
 8002dfa:	e00d      	b.n	8002e18 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fc8b 	bl	800272e <HAL_I2C_SlaveTxCpltCallback>
}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	fe00e800 	.word	0xfe00e800
 8002e24:	ffff0000 	.word	0xffff0000

08002e28 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a25      	ldr	r2, [pc, #148]	@ (8002ecc <I2C_ITListenCplt+0xa4>)
 8002e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d022      	beq.n	8002ea4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ea4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fbeb 	bl	8003684 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fc57 	bl	8002772 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	ffff0000 	.word	0xffff0000

08002ed0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a6d      	ldr	r2, [pc, #436]	@ (80030a4 <I2C_ITError+0x1d4>)
 8002eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b28      	cmp	r3, #40	@ 0x28
 8002f06:	d005      	beq.n	8002f14 <I2C_ITError+0x44>
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b29      	cmp	r3, #41	@ 0x29
 8002f0c:	d002      	beq.n	8002f14 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f12:	d10b      	bne.n	8002f2c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f14:	2103      	movs	r1, #3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fbb4 	bl	8003684 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2228      	movs	r2, #40	@ 0x28
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a60      	ldr	r2, [pc, #384]	@ (80030a8 <I2C_ITError+0x1d8>)
 8002f28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2a:	e030      	b.n	8002f8e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f2c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fba7 	bl	8003684 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8e1 	bl	80030fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b60      	cmp	r3, #96	@ 0x60
 8002f46:	d01f      	beq.n	8002f88 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d114      	bne.n	8002f88 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d109      	bne.n	8002f80 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2220      	movs	r2, #32
 8002f86:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d039      	beq.n	8003010 <I2C_ITError+0x140>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d002      	beq.n	8002fa8 <I2C_ITError+0xd8>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b21      	cmp	r3, #33	@ 0x21
 8002fa6:	d133      	bne.n	8003010 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb6:	d107      	bne.n	8002fc8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fc6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fe47 	bl	8001c60 <HAL_DMA_GetState>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d017      	beq.n	8003008 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	4a33      	ldr	r2, [pc, #204]	@ (80030ac <I2C_ITError+0x1dc>)
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fd21 	bl	8001a34 <HAL_DMA_Abort_IT>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d04d      	beq.n	8003094 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003002:	4610      	mov	r0, r2
 8003004:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003006:	e045      	b.n	8003094 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f851 	bl	80030b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800300e:	e041      	b.n	8003094 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d039      	beq.n	800308c <I2C_ITError+0x1bc>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b12      	cmp	r3, #18
 800301c:	d002      	beq.n	8003024 <I2C_ITError+0x154>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b22      	cmp	r3, #34	@ 0x22
 8003022:	d133      	bne.n	800308c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003032:	d107      	bne.n	8003044 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003042:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fe09 	bl	8001c60 <HAL_DMA_GetState>
 800304e:	4603      	mov	r3, r0
 8003050:	2b01      	cmp	r3, #1
 8003052:	d017      	beq.n	8003084 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	4a14      	ldr	r2, [pc, #80]	@ (80030ac <I2C_ITError+0x1dc>)
 800305a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fce3 	bl	8001a34 <HAL_DMA_Abort_IT>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800307e:	4610      	mov	r0, r2
 8003080:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003082:	e009      	b.n	8003098 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f813 	bl	80030b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800308a:	e005      	b.n	8003098 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f80f 	bl	80030b0 <I2C_TreatErrorCallback>
  }
}
 8003092:	e002      	b.n	800309a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003098:	bf00      	nop
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	ffff0000 	.word	0xffff0000
 80030a8:	080027af 	.word	0x080027af
 80030ac:	08003147 	.word	0x08003147

080030b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b60      	cmp	r3, #96	@ 0x60
 80030c2:	d10e      	bne.n	80030e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fb5d 	bl	800279a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030e0:	e009      	b.n	80030f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fb48 	bl	8002786 <HAL_I2C_ErrorCallback>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d103      	bne.n	800311c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d007      	beq.n	800313a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	619a      	str	r2, [r3, #24]
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	2200      	movs	r2, #0
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	2200      	movs	r2, #0
 8003172:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ff9b 	bl	80030b0 <I2C_TreatErrorCallback>
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003192:	e03b      	b.n	800320c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	6839      	ldr	r1, [r7, #0]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f961 	bl	8003460 <I2C_IsErrorOccurred>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e041      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d02d      	beq.n	800320c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b0:	f7fe f986 	bl	80014c0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d302      	bcc.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d122      	bne.n	800320c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d113      	bne.n	800320c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e00f      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d0b4      	beq.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003240:	e033      	b.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f90a 	bl	8003460 <I2C_IsErrorOccurred>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e031      	b.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d025      	beq.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325e:	f7fe f92f 	bl	80014c0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11a      	bne.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d013      	beq.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e007      	b.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d1c4      	bne.n	8003242 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ce:	e02f      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f8c3 	bl	8003460 <I2C_IsErrorOccurred>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e02d      	b.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe f8ec 	bl	80014c0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11a      	bne.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d013      	beq.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d1c8      	bne.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003358:	e071      	b.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f87e 	bl	8003460 <I2C_IsErrorOccurred>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d13b      	bne.n	80033f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d138      	bne.n	80033f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d105      	bne.n	800339c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d121      	bne.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2204      	movs	r2, #4
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2220      	movs	r2, #32
 80033be:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b24      	ldr	r3, [pc, #144]	@ (800345c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80033cc:	400b      	ands	r3, r1
 80033ce:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
 80033ec:	e002      	b.n	80033f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80033f4:	f7fe f864 	bl	80014c0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00f      	beq.n	800343e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d002      	beq.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d083      	beq.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fe00e800 	.word	0xfe00e800

08003460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d068      	beq.n	800355e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003494:	e049      	b.n	800352a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d045      	beq.n	800352a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe f80f 	bl	80014c0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_IsErrorOccurred+0x54>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d13a      	bne.n	800352a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d6:	d121      	bne.n	800351c <I2C_IsErrorOccurred+0xbc>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034de:	d01d      	beq.n	800351c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d01a      	beq.n	800351c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f6:	f7fd ffe3 	bl	80014c0 <HAL_GetTick>
 80034fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	e00e      	b.n	800351c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fe:	f7fd ffdf 	bl	80014c0 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b19      	cmp	r3, #25
 800350a:	d907      	bls.n	800351c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800351a:	e006      	b.n	800352a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b20      	cmp	r3, #32
 8003528:	d1e9      	bne.n	80034fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d003      	beq.n	8003540 <I2C_IsErrorOccurred+0xe0>
 8003538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0aa      	beq.n	8003496 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2220      	movs	r2, #32
 800354e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01c      	beq.n	800360e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff fd92 	bl	80030fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <I2C_IsErrorOccurred+0x1bc>)
 80035e6:	400b      	ands	r3, r1
 80035e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800360e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	@ 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	4613      	mov	r3, r2
 8003630:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003638:	7a7b      	ldrb	r3, [r7, #9]
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003640:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	4313      	orrs	r3, r2
 800364a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800364e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	0d5b      	lsrs	r3, r3, #21
 800365a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <I2C_TransferConfig+0x60>)
 8003660:	430b      	orrs	r3, r1
 8003662:	43db      	mvns	r3, r3
 8003664:	ea02 0103 	and.w	r1, r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	03ff63ff 	.word	0x03ff63ff

08003684 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00f      	beq.n	80036be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80036a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036b2:	2b28      	cmp	r3, #40	@ 0x28
 80036b4:	d003      	beq.n	80036be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80036bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00f      	beq.n	80036e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80036ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036dc:	2b28      	cmp	r3, #40	@ 0x28
 80036de:	d003      	beq.n	80036e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80036e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da03      	bge.n	80036f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d103      	bne.n	8003706 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003704:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	2b20      	cmp	r3, #32
 800370a:	d103      	bne.n	8003714 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d103      	bne.n	8003722 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003720:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43da      	mvns	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	400a      	ands	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	d138      	bne.n	80037c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003760:	2302      	movs	r3, #2
 8003762:	e032      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	@ 0x24
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d139      	bne.n	8003860 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e033      	b.n	8003862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2224      	movs	r2, #36	@ 0x24
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003828:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d141      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b4b      	ldr	r3, [pc, #300]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d131      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800388c:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003892:	4a46      	ldr	r2, [pc, #280]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800389c:	4b43      	ldr	r3, [pc, #268]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038a4:	4a41      	ldr	r2, [pc, #260]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ac:	4b40      	ldr	r3, [pc, #256]	@ (80039b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2232      	movs	r2, #50	@ 0x32
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	4a3f      	ldr	r2, [pc, #252]	@ (80039b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	0c9b      	lsrs	r3, r3, #18
 80038be:	3301      	adds	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c2:	e002      	b.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ca:	4b38      	ldr	r3, [pc, #224]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d6:	d102      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f2      	bne.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038de:	4b33      	ldr	r3, [pc, #204]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ea:	d158      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e057      	b.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f0:	4b2e      	ldr	r3, [pc, #184]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f6:	4a2d      	ldr	r2, [pc, #180]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003900:	e04d      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003908:	d141      	bne.n	800398e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800390a:	4b28      	ldr	r3, [pc, #160]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003916:	d131      	bne.n	800397c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003918:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800391e:	4a23      	ldr	r2, [pc, #140]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003924:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003928:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003930:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003936:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003938:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2232      	movs	r2, #50	@ 0x32
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	0c9b      	lsrs	r3, r3, #18
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394e:	e002      	b.n	8003956 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3b01      	subs	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003962:	d102      	bne.n	800396a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f2      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003976:	d112      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e011      	b.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003982:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003988:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800398c:	e007      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800398e:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003996:	4a05      	ldr	r2, [pc, #20]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800399c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40007000 	.word	0x40007000
 80039b0:	20000000 	.word	0x20000000
 80039b4:	431bde83 	.word	0x431bde83

080039b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c6:	6093      	str	r3, [r2, #8]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40007000 	.word	0x40007000

080039d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e2fe      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d075      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f6:	4b97      	ldr	r3, [pc, #604]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a00:	4b94      	ldr	r3, [pc, #592]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCC_OscConfig+0x3e>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_OscConfig+0x44>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b8d      	ldr	r3, [pc, #564]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x108>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d157      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e2d9      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x74>
 8003a3e:	4b85      	ldr	r3, [pc, #532]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a84      	ldr	r2, [pc, #528]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x98>
 8003a56:	4b7f      	ldr	r3, [pc, #508]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b7c      	ldr	r3, [pc, #496]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7b      	ldr	r2, [pc, #492]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a70:	4b78      	ldr	r3, [pc, #480]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a77      	ldr	r2, [pc, #476]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b75      	ldr	r3, [pc, #468]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a74      	ldr	r2, [pc, #464]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd fd16 	bl	80014c0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd fd12 	bl	80014c0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	@ 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e29e      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xc0>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fd02 	bl	80014c0 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fcfe 	bl	80014c0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	@ 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e28a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad2:	4b60      	ldr	r3, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xe8>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aee:	4b59      	ldr	r3, [pc, #356]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af8:	4b56      	ldr	r3, [pc, #344]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_OscConfig+0x136>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_OscConfig+0x13c>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11f      	bne.n	8003b54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b14:	4b4f      	ldr	r3, [pc, #316]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_OscConfig+0x154>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e25d      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b49      	ldr	r3, [pc, #292]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	4946      	ldr	r1, [pc, #280]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b40:	4b45      	ldr	r3, [pc, #276]	@ (8003c58 <HAL_RCC_OscConfig+0x280>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd fc6f 	bl	8001428 <HAL_InitTick>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d043      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e249      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d023      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3c      	ldr	r2, [pc, #240]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fd fcaa 	bl	80014c0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fd fca6 	bl	80014c0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e232      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	492d      	ldr	r1, [pc, #180]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
 8003ba2:	e01a      	b.n	8003bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fc86 	bl	80014c0 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fd fc82 	bl	80014c0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e20e      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bca:	4b22      	ldr	r3, [pc, #136]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1e0>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d041      	beq.n	8003c6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01c      	beq.n	8003c28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf4:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fc5f 	bl	80014c0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fd fc5b 	bl	80014c0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1e7      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c18:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ef      	beq.n	8003c06 <HAL_RCC_OscConfig+0x22e>
 8003c26:	e020      	b.n	8003c6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2e:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd fc42 	bl	80014c0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c3e:	e00d      	b.n	8003c5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c40:	f7fd fc3e 	bl	80014c0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d906      	bls.n	8003c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e1ca      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ea      	bne.n	8003c40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a6 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c7c:	4b84      	ldr	r3, [pc, #528]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2b4>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x2b6>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b7f      	ldr	r3, [pc, #508]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	4a7e      	ldr	r2, [pc, #504]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cae:	4b79      	ldr	r3, [pc, #484]	@ (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cba:	4b76      	ldr	r3, [pc, #472]	@ (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	@ (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fbfb 	bl	80014c0 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fd fbf7 	bl	80014c0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e183      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e94 <HAL_RCC_OscConfig+0x4bc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_RCC_OscConfig+0x32e>
 8003cf4:	4b66      	ldr	r3, [pc, #408]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	4a65      	ldr	r2, [pc, #404]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d04:	e024      	b.n	8003d50 <HAL_RCC_OscConfig+0x378>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d110      	bne.n	8003d30 <HAL_RCC_OscConfig+0x358>
 8003d0e:	4b60      	ldr	r3, [pc, #384]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d14:	4a5e      	ldr	r2, [pc, #376]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	4a5a      	ldr	r2, [pc, #360]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_OscConfig+0x378>
 8003d30:	4b57      	ldr	r3, [pc, #348]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d36:	4a56      	ldr	r2, [pc, #344]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d40:	4b53      	ldr	r3, [pc, #332]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	4a52      	ldr	r2, [pc, #328]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d016      	beq.n	8003d86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd fbb2 	bl	80014c0 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fd fbae 	bl	80014c0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e138      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b46      	ldr	r3, [pc, #280]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ed      	beq.n	8003d60 <HAL_RCC_OscConfig+0x388>
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd fb9b 	bl	80014c0 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fd fb97 	bl	80014c0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e121      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	4b3a      	ldr	r3, [pc, #232]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ed      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b35      	ldr	r3, [pc, #212]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	4a34      	ldr	r2, [pc, #208]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dde:	4a2c      	ldr	r2, [pc, #176]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd fb6a 	bl	80014c0 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df0:	f7fd fb66 	bl	80014c0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0f2      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e02:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ef      	beq.n	8003df0 <HAL_RCC_OscConfig+0x418>
 8003e10:	e01b      	b.n	8003e4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e12:	4b1f      	ldr	r3, [pc, #124]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e18:	4a1d      	ldr	r2, [pc, #116]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd fb4d 	bl	80014c0 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e2a:	f7fd fb49 	bl	80014c0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0d5      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e3c:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80c9 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	f000 8083 	beq.w	8003f68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d15e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a08      	ldr	r2, [pc, #32]	@ (8003e90 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fd fb23 	bl	80014c0 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd fb1f 	bl	80014c0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d905      	bls.n	8003e98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0ab      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	4b55      	ldr	r3, [pc, #340]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ec      	bne.n	8003e7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea4:	4b52      	ldr	r3, [pc, #328]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	4b52      	ldr	r3, [pc, #328]	@ (8003ff4 <HAL_RCC_OscConfig+0x61c>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6a11      	ldr	r1, [r2, #32]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ebe:	0212      	lsls	r2, r2, #8
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ec6:	0852      	lsrs	r2, r2, #1
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0552      	lsls	r2, r2, #21
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ede:	06d2      	lsls	r2, r2, #27
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	4943      	ldr	r1, [pc, #268]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a40      	ldr	r2, [pc, #256]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd fade 	bl	80014c0 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd fada 	bl	80014c0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e066      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1a:	4b35      	ldr	r3, [pc, #212]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x530>
 8003f26:	e05e      	b.n	8003fe6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b31      	ldr	r3, [pc, #196]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fac4 	bl	80014c0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd fac0 	bl	80014c0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e04c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4e:	4b28      	ldr	r3, [pc, #160]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f5a:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	4924      	ldr	r1, [pc, #144]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f60:	4b25      	ldr	r3, [pc, #148]	@ (8003ff8 <HAL_RCC_OscConfig+0x620>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	60cb      	str	r3, [r1, #12]
 8003f66:	e03e      	b.n	8003fe6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e039      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff0 <HAL_RCC_OscConfig+0x618>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d12c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	3b01      	subs	r3, #1
 8003f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d123      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d113      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	019f800c 	.word	0x019f800c
 8003ff8:	feeefffc 	.word	0xfeeefffc

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e11e      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b91      	ldr	r3, [pc, #580]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d910      	bls.n	8004044 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b8e      	ldr	r3, [pc, #568]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 020f 	bic.w	r2, r3, #15
 800402a:	498c      	ldr	r1, [pc, #560]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b8a      	ldr	r3, [pc, #552]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e106      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d073      	beq.n	8004138 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d129      	bne.n	80040ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004058:	4b81      	ldr	r3, [pc, #516]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0f4      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004068:	f000 f9e4 	bl	8004434 <RCC_GetSysClockFreqFromPLLSource>
 800406c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4a7c      	ldr	r2, [pc, #496]	@ (8004264 <HAL_RCC_ClockConfig+0x268>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d93f      	bls.n	80040f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004076:	4b7a      	ldr	r3, [pc, #488]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800408a:	2b00      	cmp	r3, #0
 800408c:	d033      	beq.n	80040f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12f      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004096:	4b72      	ldr	r3, [pc, #456]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800409e:	4a70      	ldr	r2, [pc, #448]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80040a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e024      	b.n	80040f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0c6      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c4:	4b66      	ldr	r3, [pc, #408]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0be      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040d4:	f000 f914 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4a61      	ldr	r2, [pc, #388]	@ (8004264 <HAL_RCC_ClockConfig+0x268>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d909      	bls.n	80040f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040f2:	2380      	movs	r3, #128	@ 0x80
 80040f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0203 	bic.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4957      	ldr	r1, [pc, #348]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fd f9da 	bl	80014c0 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	e00a      	b.n	8004126 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fd f9d6 	bl	80014c0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e095      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	4b4e      	ldr	r3, [pc, #312]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 020c 	and.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	429a      	cmp	r2, r3
 8004136:	d1eb      	bne.n	8004110 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d023      	beq.n	800418c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b43      	ldr	r3, [pc, #268]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a42      	ldr	r2, [pc, #264]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004156:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800415a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004168:	4b3d      	ldr	r3, [pc, #244]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004170:	4a3b      	ldr	r2, [pc, #236]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004172:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004176:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b39      	ldr	r3, [pc, #228]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4936      	ldr	r1, [pc, #216]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
 800418a:	e008      	b.n	800419e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b80      	cmp	r3, #128	@ 0x80
 8004190:	d105      	bne.n	800419e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004192:	4b33      	ldr	r3, [pc, #204]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4a32      	ldr	r2, [pc, #200]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004198:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800419e:	4b2f      	ldr	r3, [pc, #188]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d21d      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ac:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 020f 	bic.w	r2, r3, #15
 80041b4:	4929      	ldr	r1, [pc, #164]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041bc:	f7fd f980 	bl	80014c0 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd f97c 	bl	80014c0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e03b      	b.n	8004252 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <HAL_RCC_ClockConfig+0x260>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1ed      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4917      	ldr	r1, [pc, #92]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490f      	ldr	r1, [pc, #60]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004226:	f000 f86b 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <HAL_RCC_ClockConfig+0x264>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490c      	ldr	r1, [pc, #48]	@ (8004268 <HAL_RCC_ClockConfig+0x26c>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <HAL_RCC_ClockConfig+0x270>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004246:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <HAL_RCC_ClockConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd f8ec 	bl	8001428 <HAL_InitTick>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40022000 	.word	0x40022000
 8004260:	40021000 	.word	0x40021000
 8004264:	04c4b400 	.word	0x04c4b400
 8004268:	08007760 	.word	0x08007760
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	@ 0x30
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8004280:	2302      	movs	r3, #2
 8004282:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004284:	2303      	movs	r3, #3
 8004286:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <HAL_RCC_MCOConfig+0x88>)
 80042b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042b2:	2101      	movs	r1, #1
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	4910      	ldr	r1, [pc, #64]	@ (80042fc <HAL_RCC_MCOConfig+0x88>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	0d1b      	lsrs	r3, r3, #20
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80042ce:	f107 0310 	add.w	r3, r7, #16
 80042d2:	4619      	mov	r1, r3
 80042d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042d6:	f7fd fd71 	bl	8001dbc <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80042da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCC_MCOConfig+0x88>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	4903      	ldr	r1, [pc, #12]	@ (80042fc <HAL_RCC_MCOConfig+0x88>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
  }
}
 80042f4:	bf00      	nop
 80042f6:	3730      	adds	r7, #48	@ 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004306:	4b2c      	ldr	r3, [pc, #176]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d102      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004312:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e047      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004318:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d102      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004324:	4b26      	ldr	r3, [pc, #152]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	e03e      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800432a:	4b23      	ldr	r3, [pc, #140]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d136      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004336:	4b20      	ldr	r3, [pc, #128]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004340:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d10c      	bne.n	800436e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004354:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	4a16      	ldr	r2, [pc, #88]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800435e:	68d2      	ldr	r2, [r2, #12]
 8004360:	0a12      	lsrs	r2, r2, #8
 8004362:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	617b      	str	r3, [r7, #20]
      break;
 800436c:	e00c      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800436e:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	4a10      	ldr	r2, [pc, #64]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004378:	68d2      	ldr	r2, [r2, #12]
 800437a:	0a12      	lsrs	r2, r2, #8
 800437c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
      break;
 8004386:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0e5b      	lsrs	r3, r3, #25
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	3301      	adds	r3, #1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e001      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043a8:	693b      	ldr	r3, [r7, #16]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	016e3600 	.word	0x016e3600

080043c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4904      	ldr	r1, [pc, #16]	@ (8004404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	08007770 	.word	0x08007770

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800440c:	f7ff ffda 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0adb      	lsrs	r3, r3, #11
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4904      	ldr	r1, [pc, #16]	@ (8004430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	08007770 	.word	0x08007770

08004434 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800443a:	4b1e      	ldr	r3, [pc, #120]	@ (80044b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004444:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	3301      	adds	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d10c      	bne.n	8004472 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004458:	4a17      	ldr	r2, [pc, #92]	@ (80044b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004462:	68d2      	ldr	r2, [r2, #12]
 8004464:	0a12      	lsrs	r2, r2, #8
 8004466:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	617b      	str	r3, [r7, #20]
    break;
 8004470:	e00c      	b.n	800448c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004472:	4a12      	ldr	r2, [pc, #72]	@ (80044bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	0a12      	lsrs	r2, r2, #8
 8004480:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004484:	fb02 f303 	mul.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
    break;
 800448a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800448c:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0e5b      	lsrs	r3, r3, #25
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	3301      	adds	r3, #1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044a6:	687b      	ldr	r3, [r7, #4]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40021000 	.word	0x40021000
 80044b8:	016e3600 	.word	0x016e3600
 80044bc:	00f42400 	.word	0x00f42400

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044c8:	2300      	movs	r3, #0
 80044ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044cc:	2300      	movs	r3, #0
 80044ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8098 	beq.w	800460e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e2:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	4b40      	ldr	r3, [pc, #256]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f2:	4a3f      	ldr	r2, [pc, #252]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fa:	4b3d      	ldr	r3, [pc, #244]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450a:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a39      	ldr	r2, [pc, #228]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004514:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004516:	f7fc ffd3 	bl	80014c0 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451c:	e009      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fc ffcf 	bl	80014c0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d902      	bls.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	74fb      	strb	r3, [r7, #19]
        break;
 8004530:	e005      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004532:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ef      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d159      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004544:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d019      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004560:	4b23      	ldr	r3, [pc, #140]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800456c:	4b20      	ldr	r3, [pc, #128]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	4a1f      	ldr	r2, [pc, #124]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800457c:	4b1c      	ldr	r3, [pc, #112]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	4a1b      	ldr	r2, [pc, #108]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800458c:	4a18      	ldr	r2, [pc, #96]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fc ff8f 	bl	80014c0 <HAL_GetTick>
 80045a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a4:	e00b      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fc ff8b 	bl	80014c0 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d902      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	74fb      	strb	r3, [r7, #19]
            break;
 80045bc:	e006      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045be:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ec      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d2:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	4903      	ldr	r1, [pc, #12]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	74bb      	strb	r3, [r7, #18]
 80045ee:	e005      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045fc:	7c7b      	ldrb	r3, [r7, #17]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4ba6      	ldr	r3, [pc, #664]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	4aa5      	ldr	r2, [pc, #660]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461a:	4ba0      	ldr	r3, [pc, #640]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f023 0203 	bic.w	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	499c      	ldr	r1, [pc, #624]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463c:	4b97      	ldr	r3, [pc, #604]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	f023 020c 	bic.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4994      	ldr	r1, [pc, #592]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800465e:	4b8f      	ldr	r3, [pc, #572]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004664:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	498b      	ldr	r1, [pc, #556]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004680:	4b86      	ldr	r3, [pc, #536]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4983      	ldr	r1, [pc, #524]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a2:	4b7e      	ldr	r3, [pc, #504]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	497a      	ldr	r1, [pc, #488]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c4:	4b75      	ldr	r3, [pc, #468]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	4972      	ldr	r1, [pc, #456]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e6:	4b6d      	ldr	r3, [pc, #436]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4969      	ldr	r1, [pc, #420]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004708:	4b64      	ldr	r3, [pc, #400]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4961      	ldr	r1, [pc, #388]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800472a:	4b5c      	ldr	r3, [pc, #368]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	4958      	ldr	r1, [pc, #352]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d015      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800474c:	4b53      	ldr	r3, [pc, #332]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	4950      	ldr	r1, [pc, #320]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800476a:	d105      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476c:	4b4b      	ldr	r3, [pc, #300]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a4a      	ldr	r2, [pc, #296]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004776:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004780:	2b00      	cmp	r3, #0
 8004782:	d015      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004784:	4b45      	ldr	r3, [pc, #276]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4942      	ldr	r1, [pc, #264]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047a2:	d105      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a4:	4b3d      	ldr	r3, [pc, #244]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a3c      	ldr	r2, [pc, #240]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d015      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047bc:	4b37      	ldr	r3, [pc, #220]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	4934      	ldr	r1, [pc, #208]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047da:	d105      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047dc:	4b2f      	ldr	r3, [pc, #188]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4a2e      	ldr	r2, [pc, #184]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f4:	4b29      	ldr	r3, [pc, #164]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004802:	4926      	ldr	r1, [pc, #152]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004812:	d105      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b21      	ldr	r3, [pc, #132]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a20      	ldr	r2, [pc, #128]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d015      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800482c:	4b1b      	ldr	r3, [pc, #108]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	4918      	ldr	r1, [pc, #96]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800484a:	d105      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484c:	4b13      	ldr	r3, [pc, #76]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a12      	ldr	r2, [pc, #72]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004856:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d015      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004864:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004872:	490a      	ldr	r1, [pc, #40]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004882:	d105      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4a04      	ldr	r2, [pc, #16]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800488a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004890:	7cbb      	ldrb	r3, [r7, #18]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e049      	b.n	8004946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fc12 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f001 f808 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e049      	b.n	80049f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f841 	bl	80049fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f000 ffb1 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e03c      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d109      	bne.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x46>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e02f      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x60>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e022      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d109      	bne.n	8004a8a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	bf0c      	ite	eq
 8004a82:	2301      	moveq	r3, #1
 8004a84:	2300      	movne	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e015      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d109      	bne.n	8004aa4 <HAL_TIM_PWM_Start_DMA+0x94>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e1a6      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e03c      	b.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x142>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d109      	bne.n	8004af2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e02f      	b.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x142>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d109      	bne.n	8004b0c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	e022      	b.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d109      	bne.n	8004b26 <HAL_TIM_PWM_Start_DMA+0x116>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e015      	b.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d109      	bne.n	8004b40 <HAL_TIM_PWM_Start_DMA+0x130>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e008      	b.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d034      	beq.n	8004bc0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x152>
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e152      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x166>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b74:	e026      	b.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d104      	bne.n	8004b86 <HAL_TIM_PWM_Start_DMA+0x176>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b84:	e01e      	b.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d104      	bne.n	8004b96 <HAL_TIM_PWM_Start_DMA+0x186>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b94:	e016      	b.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start_DMA+0x196>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba4:	e00e      	b.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb4:	e006      	b.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bbe:	e001      	b.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e123      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	f200 80ae 	bhi.w	8004d28 <HAL_TIM_PWM_Start_DMA+0x318>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004d29 	.word	0x08004d29
 8004bdc:	08004d29 	.word	0x08004d29
 8004be0:	08004d29 	.word	0x08004d29
 8004be4:	08004c51 	.word	0x08004c51
 8004be8:	08004d29 	.word	0x08004d29
 8004bec:	08004d29 	.word	0x08004d29
 8004bf0:	08004d29 	.word	0x08004d29
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004d29 	.word	0x08004d29
 8004bfc:	08004d29 	.word	0x08004d29
 8004c00:	08004d29 	.word	0x08004d29
 8004c04:	08004ce1 	.word	0x08004ce1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	4a81      	ldr	r2, [pc, #516]	@ (8004e14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	4a80      	ldr	r2, [pc, #512]	@ (8004e18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	4a7f      	ldr	r2, [pc, #508]	@ (8004e1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004c1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3334      	adds	r3, #52	@ 0x34
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	887b      	ldrh	r3, [r7, #2]
 8004c30:	f7fc fe2c 	bl	800188c <HAL_DMA_Start_IT>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0e6      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4c:	60da      	str	r2, [r3, #12]
      break;
 8004c4e:	e06e      	b.n	8004d2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	4a6f      	ldr	r2, [pc, #444]	@ (8004e14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	4a6d      	ldr	r2, [pc, #436]	@ (8004e1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004c66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3338      	adds	r3, #56	@ 0x38
 8004c74:	461a      	mov	r2, r3
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	f7fc fe08 	bl	800188c <HAL_DMA_Start_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0c2      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c94:	60da      	str	r2, [r3, #12]
      break;
 8004c96:	e04a      	b.n	8004d2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004e14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4a5c      	ldr	r2, [pc, #368]	@ (8004e18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a5b      	ldr	r2, [pc, #364]	@ (8004e1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004cae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	333c      	adds	r3, #60	@ 0x3c
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	f7fc fde4 	bl	800188c <HAL_DMA_Start_IT>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e09e      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cdc:	60da      	str	r2, [r3, #12]
      break;
 8004cde:	e026      	b.n	8004d2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	4a4b      	ldr	r2, [pc, #300]	@ (8004e14 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cec:	4a4a      	ldr	r2, [pc, #296]	@ (8004e18 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	4a49      	ldr	r2, [pc, #292]	@ (8004e1c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004cf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3340      	adds	r3, #64	@ 0x40
 8004d04:	461a      	mov	r2, r3
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	f7fc fdc0 	bl	800188c <HAL_DMA_Start_IT>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07a      	b.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d24:	60da      	str	r2, [r3, #12]
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d16a      	bne.n	8004e0a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fa07 	bl	8006150 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a36      	ldr	r2, [pc, #216]	@ (8004e20 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a34      	ldr	r2, [pc, #208]	@ (8004e24 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a33      	ldr	r2, [pc, #204]	@ (8004e28 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a31      	ldr	r2, [pc, #196]	@ (8004e2c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a30      	ldr	r2, [pc, #192]	@ (8004e30 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_PWM_Start_DMA+0x368>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_TIM_PWM_Start_DMA+0x36a>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a23      	ldr	r2, [pc, #140]	@ (8004e20 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d018      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da0:	d013      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a23      	ldr	r2, [pc, #140]	@ (8004e34 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00e      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a21      	ldr	r2, [pc, #132]	@ (8004e38 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	@ (8004e24 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	@ (8004e28 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d115      	bne.n	8004df6 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e3c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d015      	beq.n	8004e08 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de2:	d011      	beq.n	8004e08 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	e008      	b.n	8004e08 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e000      	b.n	8004e0a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	080057e3 	.word	0x080057e3
 8004e18:	0800588b 	.word	0x0800588b
 8004e1c:	08005751 	.word	0x08005751
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40013400 	.word	0x40013400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	00010007 	.word	0x00010007

08004e40 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d855      	bhi.n	8004f00 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004e54:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004f01 	.word	0x08004f01
 8004e64:	08004f01 	.word	0x08004f01
 8004e68:	08004f01 	.word	0x08004f01
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004f01 	.word	0x08004f01
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f01 	.word	0x08004f01
 8004e7c:	08004ec9 	.word	0x08004ec9
 8004e80:	08004f01 	.word	0x08004f01
 8004e84:	08004f01 	.word	0x08004f01
 8004e88:	08004f01 	.word	0x08004f01
 8004e8c:	08004ee5 	.word	0x08004ee5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fc fdc5 	bl	8001a34 <HAL_DMA_Abort_IT>
      break;
 8004eaa:	e02c      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fc fdb7 	bl	8001a34 <HAL_DMA_Abort_IT>
      break;
 8004ec6:	e01e      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ed6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fc fda9 	bl	8001a34 <HAL_DMA_Abort_IT>
      break;
 8004ee2:	e010      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc fd9b 	bl	8001a34 <HAL_DMA_Abort_IT>
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f040 8081 	bne.w	8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	6839      	ldr	r1, [r7, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f91a 	bl	8006150 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3e      	ldr	r2, [pc, #248]	@ (800501c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8005020 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3b      	ldr	r2, [pc, #236]	@ (8005024 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	@ (8005028 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a38      	ldr	r2, [pc, #224]	@ (800502c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_PWM_Stop_DMA+0x112>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6a1a      	ldr	r2, [r3, #32]
 8004f6e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10f      	bne.n	8004fb8 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc6:	e023      	b.n	8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d104      	bne.n	8004fd8 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd6:	e01b      	b.n	8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d104      	bne.n	8004fe8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe6:	e013      	b.n	8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d104      	bne.n	8004ff8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ff6:	e00b      	b.n	8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d104      	bne.n	8005008 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005006:	e003      	b.n	8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40013400 	.word	0x40013400
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800

08005030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0202 	mvn.w	r2, #2
 8005064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb4a 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fb3c 	bl	8005700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fb fc85 	bl	8000998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d020      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0204 	mvn.w	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb24 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fb16 	bl	8005700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fb fc5f 	bl	8000998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fafe 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 faf0 	bl	8005700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fb fc39 	bl	8000998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0210 	mvn.w	r2, #16
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fad8 	bl	8005714 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 faca 	bl	8005700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fb fc13 	bl	8000998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 faa8 	bl	80056ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f001 f875 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 f86d 	bl	80062c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00c      	beq.n	8005212 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa8b 	bl	8005728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0220 	mvn.w	r2, #32
 800522e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 f835 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f841 	bl	80062dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 f839 	bl	80062f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 f831 	bl	8006304 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00c      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f829 	bl	8006318 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0ff      	b.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b14      	cmp	r3, #20
 80052fa:	f200 80f0 	bhi.w	80054de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005359 	.word	0x08005359
 8005308:	080054df 	.word	0x080054df
 800530c:	080054df 	.word	0x080054df
 8005310:	080054df 	.word	0x080054df
 8005314:	08005399 	.word	0x08005399
 8005318:	080054df 	.word	0x080054df
 800531c:	080054df 	.word	0x080054df
 8005320:	080054df 	.word	0x080054df
 8005324:	080053db 	.word	0x080053db
 8005328:	080054df 	.word	0x080054df
 800532c:	080054df 	.word	0x080054df
 8005330:	080054df 	.word	0x080054df
 8005334:	0800541b 	.word	0x0800541b
 8005338:	080054df 	.word	0x080054df
 800533c:	080054df 	.word	0x080054df
 8005340:	080054df 	.word	0x080054df
 8005344:	0800545d 	.word	0x0800545d
 8005348:	080054df 	.word	0x080054df
 800534c:	080054df 	.word	0x080054df
 8005350:	080054df 	.word	0x080054df
 8005354:	0800549d 	.word	0x0800549d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fb64 	bl	8005a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6999      	ldr	r1, [r3, #24]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	619a      	str	r2, [r3, #24]
      break;
 8005396:	e0a5      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fbd4 	bl	8005b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]
      break;
 80053d8:	e084      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fc3d 	bl	8005c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0208 	orr.w	r2, r2, #8
 80053f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0204 	bic.w	r2, r2, #4
 8005404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69d9      	ldr	r1, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	61da      	str	r2, [r3, #28]
      break;
 8005418:	e064      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fca5 	bl	8005d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	021a      	lsls	r2, r3, #8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	61da      	str	r2, [r3, #28]
      break;
 800545a:	e043      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fd0e 	bl	8005e84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800549a:	e023      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fd52 	bl	8005f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054dc:	e002      	b.n	80054e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
      break;
 80054e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIM_ConfigClockSource+0x1c>
 8005510:	2302      	movs	r3, #2
 8005512:	e0de      	b.n	80056d2 <HAL_TIM_ConfigClockSource+0x1da>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800553e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a63      	ldr	r2, [pc, #396]	@ (80056dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	f000 80a9 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005554:	4a61      	ldr	r2, [pc, #388]	@ (80056dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	f200 80ae 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800555c:	4a60      	ldr	r2, [pc, #384]	@ (80056e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	f000 80a1 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005564:	4a5e      	ldr	r2, [pc, #376]	@ (80056e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	f200 80a6 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800556c:	4a5d      	ldr	r2, [pc, #372]	@ (80056e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800556e:	4293      	cmp	r3, r2
 8005570:	f000 8099 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005574:	4a5b      	ldr	r2, [pc, #364]	@ (80056e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005576:	4293      	cmp	r3, r2
 8005578:	f200 809e 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800557c:	4a5a      	ldr	r2, [pc, #360]	@ (80056e8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f000 8091 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005584:	4a58      	ldr	r2, [pc, #352]	@ (80056e8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	f200 8096 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800558c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005590:	f000 8089 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005594:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005598:	f200 808e 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800559c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a0:	d03e      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0x128>
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a6:	f200 8087 	bhi.w	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ae:	f000 8086 	beq.w	80056be <HAL_TIM_ConfigClockSource+0x1c6>
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b6:	d87f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055b8:	2b70      	cmp	r3, #112	@ 0x70
 80055ba:	d01a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xfa>
 80055bc:	2b70      	cmp	r3, #112	@ 0x70
 80055be:	d87b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055c0:	2b60      	cmp	r3, #96	@ 0x60
 80055c2:	d050      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0x16e>
 80055c4:	2b60      	cmp	r3, #96	@ 0x60
 80055c6:	d877      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055c8:	2b50      	cmp	r3, #80	@ 0x50
 80055ca:	d03c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x14e>
 80055cc:	2b50      	cmp	r3, #80	@ 0x50
 80055ce:	d873      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	d058      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0x18e>
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	d86f      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055d8:	2b30      	cmp	r3, #48	@ 0x30
 80055da:	d064      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80055dc:	2b30      	cmp	r3, #48	@ 0x30
 80055de:	d86b      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d060      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d867      	bhi.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d05a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80055f0:	e062      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005602:	f000 fd85 	bl	8006110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	609a      	str	r2, [r3, #8]
      break;
 800561e:	e04f      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005630:	f000 fd6e 	bl	8006110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005642:	609a      	str	r2, [r3, #8]
      break;
 8005644:	e03c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005652:	461a      	mov	r2, r3
 8005654:	f000 fce0 	bl	8006018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2150      	movs	r1, #80	@ 0x50
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fd39 	bl	80060d6 <TIM_ITRx_SetConfig>
      break;
 8005664:	e02c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005672:	461a      	mov	r2, r3
 8005674:	f000 fcff 	bl	8006076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2160      	movs	r1, #96	@ 0x60
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fd29 	bl	80060d6 <TIM_ITRx_SetConfig>
      break;
 8005684:	e01c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005692:	461a      	mov	r2, r3
 8005694:	f000 fcc0 	bl	8006018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2140      	movs	r1, #64	@ 0x40
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fd19 	bl	80060d6 <TIM_ITRx_SetConfig>
      break;
 80056a4:	e00c      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fd10 	bl	80060d6 <TIM_ITRx_SetConfig>
      break;
 80056b6:	e003      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      break;
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80056be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	00100070 	.word	0x00100070
 80056e0:	00100040 	.word	0x00100040
 80056e4:	00100030 	.word	0x00100030
 80056e8:	00100020 	.word	0x00100020

080056ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	429a      	cmp	r2, r3
 8005766:	d107      	bne.n	8005778 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005776:	e02a      	b.n	80057ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d107      	bne.n	8005792 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	e01d      	b.n	80057ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2204      	movs	r2, #4
 80057a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057aa:	e010      	b.n	80057ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d107      	bne.n	80057c6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2208      	movs	r2, #8
 80057ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c4:	e003      	b.n	80057ce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff ffb4 	bl	800573c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d10b      	bne.n	8005812 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d136      	bne.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005810:	e031      	b.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d10b      	bne.n	8005834 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2202      	movs	r2, #2
 8005820:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d125      	bne.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005832:	e020      	b.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d10b      	bne.n	8005856 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d114      	bne.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005854:	e00f      	b.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d10a      	bne.n	8005876 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2208      	movs	r2, #8
 8005864:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7fb f88e 	bl	8000998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	771a      	strb	r2, [r3, #28]
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d103      	bne.n	80058aa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	771a      	strb	r2, [r3, #28]
 80058a8:	e019      	b.n	80058de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d103      	bne.n	80058bc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2202      	movs	r2, #2
 80058b8:	771a      	strb	r2, [r3, #28]
 80058ba:	e010      	b.n	80058de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d103      	bne.n	80058ce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2204      	movs	r2, #4
 80058ca:	771a      	strb	r2, [r3, #28]
 80058cc:	e007      	b.n	80058de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d102      	bne.n	80058de <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2208      	movs	r2, #8
 80058dc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7fa ffcc 	bl	800087c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
}
 80058ea:	bf00      	nop
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a42      	ldr	r2, [pc, #264]	@ (8005a10 <TIM_Base_SetConfig+0x11c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_Base_SetConfig+0x38>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005912:	d00b      	beq.n	800592c <TIM_Base_SetConfig+0x38>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a3f      	ldr	r2, [pc, #252]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_Base_SetConfig+0x38>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a18 <TIM_Base_SetConfig+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0x38>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3d      	ldr	r2, [pc, #244]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a33      	ldr	r2, [pc, #204]	@ (8005a10 <TIM_Base_SetConfig+0x11c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01b      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594c:	d017      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a30      	ldr	r2, [pc, #192]	@ (8005a14 <TIM_Base_SetConfig+0x120>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a2f      	ldr	r2, [pc, #188]	@ (8005a18 <TIM_Base_SetConfig+0x124>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00f      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2e      	ldr	r2, [pc, #184]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2d      	ldr	r2, [pc, #180]	@ (8005a20 <TIM_Base_SetConfig+0x12c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2c      	ldr	r2, [pc, #176]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0x8a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2b      	ldr	r2, [pc, #172]	@ (8005a28 <TIM_Base_SetConfig+0x134>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d108      	bne.n	8005990 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a16      	ldr	r2, [pc, #88]	@ (8005a10 <TIM_Base_SetConfig+0x11c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00f      	beq.n	80059dc <TIM_Base_SetConfig+0xe8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <TIM_Base_SetConfig+0x128>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0xe8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a16      	ldr	r2, [pc, #88]	@ (8005a20 <TIM_Base_SetConfig+0x12c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0xe8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a15      	ldr	r2, [pc, #84]	@ (8005a24 <TIM_Base_SetConfig+0x130>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0xe8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a14      	ldr	r2, [pc, #80]	@ (8005a28 <TIM_Base_SetConfig+0x134>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d103      	bne.n	80059e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f023 0201 	bic.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]
  }
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40013400 	.word	0x40013400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0201 	bic.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f023 0302 	bic.w	r3, r3, #2
 8005a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a2c      	ldr	r2, [pc, #176]	@ (8005b38 <TIM_OC1_SetConfig+0x10c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00f      	beq.n	8005aac <TIM_OC1_SetConfig+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8005b3c <TIM_OC1_SetConfig+0x110>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00b      	beq.n	8005aac <TIM_OC1_SetConfig+0x80>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a2a      	ldr	r2, [pc, #168]	@ (8005b40 <TIM_OC1_SetConfig+0x114>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <TIM_OC1_SetConfig+0x80>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a29      	ldr	r2, [pc, #164]	@ (8005b44 <TIM_OC1_SetConfig+0x118>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC1_SetConfig+0x80>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a28      	ldr	r2, [pc, #160]	@ (8005b48 <TIM_OC1_SetConfig+0x11c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0308 	bic.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b38 <TIM_OC1_SetConfig+0x10c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00f      	beq.n	8005aee <TIM_OC1_SetConfig+0xc2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b3c <TIM_OC1_SetConfig+0x110>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_OC1_SetConfig+0xc2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	@ (8005b40 <TIM_OC1_SetConfig+0x114>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_OC1_SetConfig+0xc2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <TIM_OC1_SetConfig+0x118>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC1_SetConfig+0xc2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <TIM_OC1_SetConfig+0x11c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d111      	bne.n	8005b12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40013400 	.word	0x40013400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800

08005b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f023 0210 	bic.w	r2, r3, #16
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0320 	bic.w	r3, r3, #32
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a28      	ldr	r2, [pc, #160]	@ (8005c4c <TIM_OC2_SetConfig+0x100>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC2_SetConfig+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	@ (8005c50 <TIM_OC2_SetConfig+0x104>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10d      	bne.n	8005bd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c4c <TIM_OC2_SetConfig+0x100>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00f      	beq.n	8005bfc <TIM_OC2_SetConfig+0xb0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	@ (8005c50 <TIM_OC2_SetConfig+0x104>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC2_SetConfig+0xb0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c54 <TIM_OC2_SetConfig+0x108>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC2_SetConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <TIM_OC2_SetConfig+0x10c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC2_SetConfig+0xb0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <TIM_OC2_SetConfig+0x110>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d113      	bne.n	8005c24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a27      	ldr	r2, [pc, #156]	@ (8005d5c <TIM_OC3_SetConfig+0xfc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC3_SetConfig+0x6a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <TIM_OC3_SetConfig+0x100>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10d      	bne.n	8005ce6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <TIM_OC3_SetConfig+0xfc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_OC3_SetConfig+0xae>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <TIM_OC3_SetConfig+0x100>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_OC3_SetConfig+0xae>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d64 <TIM_OC3_SetConfig+0x104>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_OC3_SetConfig+0xae>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <TIM_OC3_SetConfig+0x108>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC3_SetConfig+0xae>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <TIM_OC3_SetConfig+0x10c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d113      	bne.n	8005d36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	bf00      	nop
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40013400 	.word	0x40013400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40014400 	.word	0x40014400
 8005d6c:	40014800 	.word	0x40014800

08005d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a28      	ldr	r2, [pc, #160]	@ (8005e70 <TIM_OC4_SetConfig+0x100>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC4_SetConfig+0x6c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a27      	ldr	r2, [pc, #156]	@ (8005e74 <TIM_OC4_SetConfig+0x104>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d10d      	bne.n	8005df8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8005e70 <TIM_OC4_SetConfig+0x100>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00f      	beq.n	8005e20 <TIM_OC4_SetConfig+0xb0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1c      	ldr	r2, [pc, #112]	@ (8005e74 <TIM_OC4_SetConfig+0x104>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_OC4_SetConfig+0xb0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e78 <TIM_OC4_SetConfig+0x108>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d007      	beq.n	8005e20 <TIM_OC4_SetConfig+0xb0>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1a      	ldr	r2, [pc, #104]	@ (8005e7c <TIM_OC4_SetConfig+0x10c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC4_SetConfig+0xb0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <TIM_OC4_SetConfig+0x110>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d113      	bne.n	8005e48 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800

08005e84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a17      	ldr	r2, [pc, #92]	@ (8005f38 <TIM_OC5_SetConfig+0xb4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00f      	beq.n	8005efe <TIM_OC5_SetConfig+0x7a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <TIM_OC5_SetConfig+0xb8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <TIM_OC5_SetConfig+0x7a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <TIM_OC5_SetConfig+0xbc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <TIM_OC5_SetConfig+0x7a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a14      	ldr	r2, [pc, #80]	@ (8005f44 <TIM_OC5_SetConfig+0xc0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC5_SetConfig+0x7a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a13      	ldr	r2, [pc, #76]	@ (8005f48 <TIM_OC5_SetConfig+0xc4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d109      	bne.n	8005f12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	051b      	lsls	r3, r3, #20
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <TIM_OC6_SetConfig+0xb8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00f      	beq.n	8005fc8 <TIM_OC6_SetConfig+0x7c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <TIM_OC6_SetConfig+0xbc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <TIM_OC6_SetConfig+0x7c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	@ (800600c <TIM_OC6_SetConfig+0xc0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_OC6_SetConfig+0x7c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a15      	ldr	r2, [pc, #84]	@ (8006010 <TIM_OC6_SetConfig+0xc4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC6_SetConfig+0x7c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a14      	ldr	r2, [pc, #80]	@ (8006014 <TIM_OC6_SetConfig+0xc8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d109      	bne.n	8005fdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	029b      	lsls	r3, r3, #10
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0201 	bic.w	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 030a 	bic.w	r3, r3, #10
 8006054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	bf00      	nop
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006076:	b480      	push	{r7}
 8006078:	b087      	sub	sp, #28
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f023 0210 	bic.w	r2, r3, #16
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	031b      	lsls	r3, r3, #12
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f043 0307 	orr.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800612a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	431a      	orrs	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2201      	movs	r2, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1a      	ldr	r2, [r3, #32]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	43db      	mvns	r3, r3
 8006172:	401a      	ands	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	fa01 f303 	lsl.w	r3, r1, r3
 8006188:	431a      	orrs	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e065      	b.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a2c      	ldr	r2, [pc, #176]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d108      	bne.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1b      	ldr	r2, [pc, #108]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d018      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622a:	d013      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a17      	ldr	r2, [pc, #92]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a12      	ldr	r2, [pc, #72]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a13      	ldr	r2, [pc, #76]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d10c      	bne.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800625a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	4313      	orrs	r3, r2
 8006264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40014000 	.word	0x40014000

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e042      	b.n	80063c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fa ff53 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2224      	movs	r2, #36	@ 0x24
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fe38 	bl	8006fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fb69 	bl	8006a54 <UART_SetConfig>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e01b      	b.n	80063c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800639a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 feb7 	bl	8007130 <UART_CheckIdleState>
 80063c2:	4603      	mov	r3, r0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b0ba      	sub	sp, #232	@ 0xe8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80063f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063fa:	4013      	ands	r3, r2
 80063fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d11b      	bne.n	8006440 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d015      	beq.n	8006440 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 82e3 	beq.w	80069fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
      }
      return;
 800643e:	e2dd      	b.n	80069fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8123 	beq.w	8006690 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800644a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800644e:	4b8d      	ldr	r3, [pc, #564]	@ (8006684 <HAL_UART_IRQHandler+0x2b8>)
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006456:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800645a:	4b8b      	ldr	r3, [pc, #556]	@ (8006688 <HAL_UART_IRQHandler+0x2bc>)
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8116 	beq.w	8006690 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d011      	beq.n	8006494 <HAL_UART_IRQHandler+0xc8>
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2201      	movs	r2, #1
 8006482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	f043 0201 	orr.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d011      	beq.n	80064c4 <HAL_UART_IRQHandler+0xf8>
 80064a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2202      	movs	r2, #2
 80064b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ba:	f043 0204 	orr.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d011      	beq.n	80064f4 <HAL_UART_IRQHandler+0x128>
 80064d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2204      	movs	r2, #4
 80064e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ea:	f043 0202 	orr.w	r2, r3, #2
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d017      	beq.n	8006530 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800650c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006510:	4b5c      	ldr	r3, [pc, #368]	@ (8006684 <HAL_UART_IRQHandler+0x2b8>)
 8006512:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2208      	movs	r2, #8
 800651e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006526:	f043 0208 	orr.w	r2, r3, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006538:	2b00      	cmp	r3, #0
 800653a:	d012      	beq.n	8006562 <HAL_UART_IRQHandler+0x196>
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006540:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00c      	beq.n	8006562 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8249 	beq.w	8006a00 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b00      	cmp	r3, #0
 8006578:	d013      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800657a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d105      	bne.n	8006592 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b6:	2b40      	cmp	r3, #64	@ 0x40
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d054      	beq.n	8006670 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fec9 	bl	800735e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d6:	2b40      	cmp	r3, #64	@ 0x40
 80065d8:	d146      	bne.n	8006668 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006606:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800660a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800661e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1d9      	bne.n	80065da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d017      	beq.n	8006660 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006636:	4a15      	ldr	r2, [pc, #84]	@ (800668c <HAL_UART_IRQHandler+0x2c0>)
 8006638:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006640:	4618      	mov	r0, r3
 8006642:	f7fb f9f7 	bl	8001a34 <HAL_DMA_Abort_IT>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d019      	beq.n	8006680 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800665a:	4610      	mov	r0, r2
 800665c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665e:	e00f      	b.n	8006680 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9e1 	bl	8006a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006666:	e00b      	b.n	8006680 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f9dd 	bl	8006a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666e:	e007      	b.n	8006680 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9d9 	bl	8006a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800667e:	e1bf      	b.n	8006a00 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006680:	bf00      	nop
    return;
 8006682:	e1bd      	b.n	8006a00 <HAL_UART_IRQHandler+0x634>
 8006684:	10000001 	.word	0x10000001
 8006688:	04000120 	.word	0x04000120
 800668c:	0800742b 	.word	0x0800742b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006694:	2b01      	cmp	r3, #1
 8006696:	f040 8153 	bne.w	8006940 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 814c 	beq.w	8006940 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8145 	beq.w	8006940 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2210      	movs	r2, #16
 80066bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	f040 80bb 	bne.w	8006844 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 818f 	beq.w	8006a04 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066f0:	429a      	cmp	r2, r3
 80066f2:	f080 8187 	bcs.w	8006a04 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 8087 	bne.w	8006822 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800672c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800673e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006742:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800674a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1da      	bne.n	8006714 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800676e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006782:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800678a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e1      	bne.n	800675e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e3      	bne.n	800679a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f0:	f023 0310 	bic.w	r3, r3, #16
 80067f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006802:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006804:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e4      	bne.n	80067e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800681c:	4618      	mov	r0, r3
 800681e:	f7fb f8b0 	bl	8001982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006834:	b29b      	uxth	r3, r3
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	b29b      	uxth	r3, r3
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8fd 	bl	8006a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006842:	e0df      	b.n	8006a04 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006850:	b29b      	uxth	r3, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80d1 	beq.w	8006a08 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80cc 	beq.w	8006a08 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800687e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006892:	647b      	str	r3, [r7, #68]	@ 0x44
 8006894:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e4      	bne.n	8006870 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	623b      	str	r3, [r7, #32]
   return(result);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e1      	bne.n	80068a6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	60fb      	str	r3, [r7, #12]
   return(result);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0310 	bic.w	r3, r3, #16
 800690a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	69b9      	ldr	r1, [r7, #24]
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	617b      	str	r3, [r7, #20]
   return(result);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006932:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f87f 	bl	8006a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800693e:	e063      	b.n	8006a08 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <HAL_UART_IRQHandler+0x59e>
 800694c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fda2 	bl	80074ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006968:	e051      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d014      	beq.n	80069a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d105      	bne.n	800698e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006992:	2b00      	cmp	r3, #0
 8006994:	d03a      	beq.n	8006a0c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
    }
    return;
 800699e:	e035      	b.n	8006a0c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <HAL_UART_IRQHandler+0x5f4>
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fd4c 	bl	8007456 <UART_EndTransmit_IT>
    return;
 80069be:	e026      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <HAL_UART_IRQHandler+0x614>
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fd7b 	bl	80074d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069de:	e016      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <HAL_UART_IRQHandler+0x642>
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da0c      	bge.n	8006a0e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fd63 	bl	80074c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069fa:	e008      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
      return;
 80069fc:	bf00      	nop
 80069fe:	e006      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
    return;
 8006a00:	bf00      	nop
 8006a02:	e004      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
      return;
 8006a04:	bf00      	nop
 8006a06:	e002      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
      return;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <HAL_UART_IRQHandler+0x642>
    return;
 8006a0c:	bf00      	nop
  }
}
 8006a0e:	37e8      	adds	r7, #232	@ 0xe8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a58:	b08c      	sub	sp, #48	@ 0x30
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4bab      	ldr	r3, [pc, #684]	@ (8006d30 <UART_SetConfig+0x2dc>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4aa0      	ldr	r2, [pc, #640]	@ (8006d34 <UART_SetConfig+0x2e0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006abc:	4313      	orrs	r3, r2
 8006abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006aca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ade:	f023 010f 	bic.w	r1, r3, #15
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a91      	ldr	r2, [pc, #580]	@ (8006d38 <UART_SetConfig+0x2e4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d125      	bne.n	8006b44 <UART_SetConfig+0xf0>
 8006af8:	4b90      	ldr	r3, [pc, #576]	@ (8006d3c <UART_SetConfig+0x2e8>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d81a      	bhi.n	8006b3c <UART_SetConfig+0xe8>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <UART_SetConfig+0xb8>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b2d 	.word	0x08006b2d
 8006b14:	08006b25 	.word	0x08006b25
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b22:	e0d6      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e0d2      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e0ce      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3a:	e0ca      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e0c6      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a7d      	ldr	r2, [pc, #500]	@ (8006d40 <UART_SetConfig+0x2ec>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d138      	bne.n	8006bc0 <UART_SetConfig+0x16c>
 8006b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8006d3c <UART_SetConfig+0x2e8>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b54:	f003 030c 	and.w	r3, r3, #12
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d82d      	bhi.n	8006bb8 <UART_SetConfig+0x164>
 8006b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b64 <UART_SetConfig+0x110>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006b99 	.word	0x08006b99
 8006b68:	08006bb9 	.word	0x08006bb9
 8006b6c:	08006bb9 	.word	0x08006bb9
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006ba9 	.word	0x08006ba9
 8006b78:	08006bb9 	.word	0x08006bb9
 8006b7c:	08006bb9 	.word	0x08006bb9
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006bb1 	.word	0x08006bb1
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e098      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e094      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e090      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e08c      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e088      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a5f      	ldr	r2, [pc, #380]	@ (8006d44 <UART_SetConfig+0x2f0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d125      	bne.n	8006c16 <UART_SetConfig+0x1c2>
 8006bca:	4b5c      	ldr	r3, [pc, #368]	@ (8006d3c <UART_SetConfig+0x2e8>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bd4:	2b30      	cmp	r3, #48	@ 0x30
 8006bd6:	d016      	beq.n	8006c06 <UART_SetConfig+0x1b2>
 8006bd8:	2b30      	cmp	r3, #48	@ 0x30
 8006bda:	d818      	bhi.n	8006c0e <UART_SetConfig+0x1ba>
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d00a      	beq.n	8006bf6 <UART_SetConfig+0x1a2>
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d814      	bhi.n	8006c0e <UART_SetConfig+0x1ba>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <UART_SetConfig+0x19a>
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d008      	beq.n	8006bfe <UART_SetConfig+0x1aa>
 8006bec:	e00f      	b.n	8006c0e <UART_SetConfig+0x1ba>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf4:	e06d      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfc:	e069      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006bfe:	2304      	movs	r3, #4
 8006c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c04:	e065      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c06:	2308      	movs	r3, #8
 8006c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0c:	e061      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c0e:	2310      	movs	r3, #16
 8006c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c14:	e05d      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a4b      	ldr	r2, [pc, #300]	@ (8006d48 <UART_SetConfig+0x2f4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d125      	bne.n	8006c6c <UART_SetConfig+0x218>
 8006c20:	4b46      	ldr	r3, [pc, #280]	@ (8006d3c <UART_SetConfig+0x2e8>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c2c:	d016      	beq.n	8006c5c <UART_SetConfig+0x208>
 8006c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c30:	d818      	bhi.n	8006c64 <UART_SetConfig+0x210>
 8006c32:	2b80      	cmp	r3, #128	@ 0x80
 8006c34:	d00a      	beq.n	8006c4c <UART_SetConfig+0x1f8>
 8006c36:	2b80      	cmp	r3, #128	@ 0x80
 8006c38:	d814      	bhi.n	8006c64 <UART_SetConfig+0x210>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <UART_SetConfig+0x1f0>
 8006c3e:	2b40      	cmp	r3, #64	@ 0x40
 8006c40:	d008      	beq.n	8006c54 <UART_SetConfig+0x200>
 8006c42:	e00f      	b.n	8006c64 <UART_SetConfig+0x210>
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e042      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e03e      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c54:	2304      	movs	r3, #4
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e03a      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e036      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e032      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a30      	ldr	r2, [pc, #192]	@ (8006d34 <UART_SetConfig+0x2e0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d12a      	bne.n	8006ccc <UART_SetConfig+0x278>
 8006c76:	4b31      	ldr	r3, [pc, #196]	@ (8006d3c <UART_SetConfig+0x2e8>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c84:	d01a      	beq.n	8006cbc <UART_SetConfig+0x268>
 8006c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c8a:	d81b      	bhi.n	8006cc4 <UART_SetConfig+0x270>
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c90:	d00c      	beq.n	8006cac <UART_SetConfig+0x258>
 8006c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c96:	d815      	bhi.n	8006cc4 <UART_SetConfig+0x270>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <UART_SetConfig+0x250>
 8006c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca0:	d008      	beq.n	8006cb4 <UART_SetConfig+0x260>
 8006ca2:	e00f      	b.n	8006cc4 <UART_SetConfig+0x270>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	e012      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006cac:	2302      	movs	r3, #2
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb2:	e00e      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cba:	e00a      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc2:	e006      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cca:	e002      	b.n	8006cd2 <UART_SetConfig+0x27e>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	@ (8006d34 <UART_SetConfig+0x2e0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	f040 80a8 	bne.w	8006e2e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d834      	bhi.n	8006d50 <UART_SetConfig+0x2fc>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0x298>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d51 	.word	0x08006d51
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d1f 	.word	0x08006d1f
 8006d00:	08006d51 	.word	0x08006d51
 8006d04:	08006d51 	.word	0x08006d51
 8006d08:	08006d51 	.word	0x08006d51
 8006d0c:	08006d27 	.word	0x08006d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7fd fb64 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8006d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d16:	e021      	b.n	8006d5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d18:	4b0c      	ldr	r3, [pc, #48]	@ (8006d4c <UART_SetConfig+0x2f8>)
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d1c:	e01e      	b.n	8006d5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d1e:	f7fd faef 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006d22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d24:	e01a      	b.n	8006d5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d2c:	e016      	b.n	8006d5c <UART_SetConfig+0x308>
 8006d2e:	bf00      	nop
 8006d30:	cfff69f3 	.word	0xcfff69f3
 8006d34:	40008000 	.word	0x40008000
 8006d38:	40013800 	.word	0x40013800
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	40004400 	.word	0x40004400
 8006d44:	40004800 	.word	0x40004800
 8006d48:	40004c00 	.word	0x40004c00
 8006d4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 812a 	beq.w	8006fb8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	4a9e      	ldr	r2, [pc, #632]	@ (8006fe4 <UART_SetConfig+0x590>)
 8006d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d305      	bcc.n	8006d94 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d903      	bls.n	8006d9c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d9a:	e10d      	b.n	8006fb8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	2200      	movs	r2, #0
 8006da0:	60bb      	str	r3, [r7, #8]
 8006da2:	60fa      	str	r2, [r7, #12]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	4a8e      	ldr	r2, [pc, #568]	@ (8006fe4 <UART_SetConfig+0x590>)
 8006daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2200      	movs	r2, #0
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dbe:	f7f9 fa2b 	bl	8000218 <__aeabi_uldivmod>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	020b      	lsls	r3, r1, #8
 8006dd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dd8:	0202      	lsls	r2, r0, #8
 8006dda:	6979      	ldr	r1, [r7, #20]
 8006ddc:	6849      	ldr	r1, [r1, #4]
 8006dde:	0849      	lsrs	r1, r1, #1
 8006de0:	2000      	movs	r0, #0
 8006de2:	460c      	mov	r4, r1
 8006de4:	4605      	mov	r5, r0
 8006de6:	eb12 0804 	adds.w	r8, r2, r4
 8006dea:	eb43 0905 	adc.w	r9, r3, r5
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	469a      	mov	sl, r3
 8006df6:	4693      	mov	fp, r2
 8006df8:	4652      	mov	r2, sl
 8006dfa:	465b      	mov	r3, fp
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fa0a 	bl	8000218 <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4613      	mov	r3, r2
 8006e0a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e12:	d308      	bcc.n	8006e26 <UART_SetConfig+0x3d2>
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e1a:	d204      	bcs.n	8006e26 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6a3a      	ldr	r2, [r7, #32]
 8006e22:	60da      	str	r2, [r3, #12]
 8006e24:	e0c8      	b.n	8006fb8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e2c:	e0c4      	b.n	8006fb8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e36:	d167      	bne.n	8006f08 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006e38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d828      	bhi.n	8006e92 <UART_SetConfig+0x43e>
 8006e40:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <UART_SetConfig+0x3f4>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
 8006e68:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fd fab6 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8006e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e72:	e014      	b.n	8006e9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fd fac8 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8006e78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e7a:	e010      	b.n	8006e9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe8 <UART_SetConfig+0x594>)
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e80:	e00d      	b.n	8006e9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fd fa3d 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006e86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e88:	e009      	b.n	8006e9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e90:	e005      	b.n	8006e9e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8089 	beq.w	8006fb8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eaa:	4a4e      	ldr	r2, [pc, #312]	@ (8006fe4 <UART_SetConfig+0x590>)
 8006eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb8:	005a      	lsls	r2, r3, #1
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	441a      	add	r2, r3
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	2b0f      	cmp	r3, #15
 8006ed0:	d916      	bls.n	8006f00 <UART_SetConfig+0x4ac>
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d212      	bcs.n	8006f00 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f023 030f 	bic.w	r3, r3, #15
 8006ee2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	085b      	lsrs	r3, r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	8bfb      	ldrh	r3, [r7, #30]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	8bfa      	ldrh	r2, [r7, #30]
 8006efc:	60da      	str	r2, [r3, #12]
 8006efe:	e05b      	b.n	8006fb8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f06:	e057      	b.n	8006fb8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d828      	bhi.n	8006f62 <UART_SetConfig+0x50e>
 8006f10:	a201      	add	r2, pc, #4	@ (adr r2, 8006f18 <UART_SetConfig+0x4c4>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f45 	.word	0x08006f45
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f63 	.word	0x08006f63
 8006f28:	08006f53 	.word	0x08006f53
 8006f2c:	08006f63 	.word	0x08006f63
 8006f30:	08006f63 	.word	0x08006f63
 8006f34:	08006f63 	.word	0x08006f63
 8006f38:	08006f5b 	.word	0x08006f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f3c:	f7fd fa4e 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8006f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f42:	e014      	b.n	8006f6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f44:	f7fd fa60 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8006f48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f4a:	e010      	b.n	8006f6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f4c:	4b26      	ldr	r3, [pc, #152]	@ (8006fe8 <UART_SetConfig+0x594>)
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f50:	e00d      	b.n	8006f6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f52:	f7fd f9d5 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006f56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f58:	e009      	b.n	8006f6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f60:	e005      	b.n	8006f6e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d021      	beq.n	8006fb8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <UART_SetConfig+0x590>)
 8006f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	441a      	add	r2, r3
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	2b0f      	cmp	r3, #15
 8006f9c:	d909      	bls.n	8006fb2 <UART_SetConfig+0x55e>
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa4:	d205      	bcs.n	8006fb2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e002      	b.n	8006fb8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3730      	adds	r7, #48	@ 0x30
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe2:	bf00      	nop
 8006fe4:	08007778 	.word	0x08007778
 8006fe8:	00f42400 	.word	0x00f42400

08006fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01a      	beq.n	8007102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ea:	d10a      	bne.n	8007102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b098      	sub	sp, #96	@ 0x60
 8007134:	af02      	add	r7, sp, #8
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007140:	f7fa f9be 	bl	80014c0 <HAL_GetTick>
 8007144:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b08      	cmp	r3, #8
 8007152:	d12f      	bne.n	80071b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007154:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715c:	2200      	movs	r2, #0
 800715e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f88e 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007182:	653b      	str	r3, [r7, #80]	@ 0x50
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800718c:	647b      	str	r3, [r7, #68]	@ 0x44
 800718e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800719a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e063      	b.n	800727c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d149      	bne.n	8007256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ca:	2200      	movs	r2, #0
 80071cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f857 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d03c      	beq.n	8007256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	60fb      	str	r3, [r7, #12]
   return(result);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722e:	61fa      	str	r2, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	617b      	str	r3, [r7, #20]
   return(result);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e012      	b.n	800727c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3758      	adds	r7, #88	@ 0x58
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	e04f      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d04b      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fa f90f 	bl	80014c0 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e04e      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d037      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b80      	cmp	r3, #128	@ 0x80
 80072ca:	d034      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d031      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d110      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f838 	bl	800735e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2208      	movs	r2, #8
 80072f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e029      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007310:	d111      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800731a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f81e 	bl	800735e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e00f      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0a0      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800735e:	b480      	push	{r7}
 8007360:	b095      	sub	sp, #84	@ 0x54
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007384:	643b      	str	r3, [r7, #64]	@ 0x40
 8007386:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800738a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e3      	bne.n	8007398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d118      	bne.n	800740a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f023 0310 	bic.w	r3, r3, #16
 80073ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6979      	ldr	r1, [r7, #20]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	613b      	str	r3, [r7, #16]
   return(result);
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e6      	bne.n	80073d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800741e:	bf00      	nop
 8007420:	3754      	adds	r7, #84	@ 0x54
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff faed 	bl	8006a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b088      	sub	sp, #32
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	60bb      	str	r3, [r7, #8]
   return(result);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6979      	ldr	r1, [r7, #20]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	613b      	str	r3, [r7, #16]
   return(result);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e6      	bne.n	800745e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fab8 	bl	8006a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a4:	bf00      	nop
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_UARTEx_DisableFifoMode+0x16>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e027      	b.n	800754e <HAL_UARTEx_DisableFifoMode+0x66>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2224      	movs	r2, #36	@ 0x24
 800750a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800752c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800756e:	2302      	movs	r3, #2
 8007570:	e02d      	b.n	80075ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2224      	movs	r2, #36	@ 0x24
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f850 	bl	8007654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e02d      	b.n	800764a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2224      	movs	r2, #36	@ 0x24
 80075fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f812 	bl	8007654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007660:	2b00      	cmp	r3, #0
 8007662:	d108      	bne.n	8007676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007674:	e031      	b.n	80076da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007676:	2308      	movs	r3, #8
 8007678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800767a:	2308      	movs	r3, #8
 800767c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	0e5b      	lsrs	r3, r3, #25
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	0f5b      	lsrs	r3, r3, #29
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	7b3a      	ldrb	r2, [r7, #12]
 80076a2:	4911      	ldr	r1, [pc, #68]	@ (80076e8 <UARTEx_SetNbDataToProcess+0x94>)
 80076a4:	5c8a      	ldrb	r2, [r1, r2]
 80076a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076aa:	7b3a      	ldrb	r2, [r7, #12]
 80076ac:	490f      	ldr	r1, [pc, #60]	@ (80076ec <UARTEx_SetNbDataToProcess+0x98>)
 80076ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	7b7a      	ldrb	r2, [r7, #13]
 80076c0:	4909      	ldr	r1, [pc, #36]	@ (80076e8 <UARTEx_SetNbDataToProcess+0x94>)
 80076c2:	5c8a      	ldrb	r2, [r1, r2]
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076c8:	7b7a      	ldrb	r2, [r7, #13]
 80076ca:	4908      	ldr	r1, [pc, #32]	@ (80076ec <UARTEx_SetNbDataToProcess+0x98>)
 80076cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	08007790 	.word	0x08007790
 80076ec:	08007798 	.word	0x08007798

080076f0 <memset>:
 80076f0:	4402      	add	r2, r0
 80076f2:	4603      	mov	r3, r0
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d100      	bne.n	80076fa <memset+0xa>
 80076f8:	4770      	bx	lr
 80076fa:	f803 1b01 	strb.w	r1, [r3], #1
 80076fe:	e7f9      	b.n	80076f4 <memset+0x4>

08007700 <__libc_init_array>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4d0d      	ldr	r5, [pc, #52]	@ (8007738 <__libc_init_array+0x38>)
 8007704:	4c0d      	ldr	r4, [pc, #52]	@ (800773c <__libc_init_array+0x3c>)
 8007706:	1b64      	subs	r4, r4, r5
 8007708:	10a4      	asrs	r4, r4, #2
 800770a:	2600      	movs	r6, #0
 800770c:	42a6      	cmp	r6, r4
 800770e:	d109      	bne.n	8007724 <__libc_init_array+0x24>
 8007710:	4d0b      	ldr	r5, [pc, #44]	@ (8007740 <__libc_init_array+0x40>)
 8007712:	4c0c      	ldr	r4, [pc, #48]	@ (8007744 <__libc_init_array+0x44>)
 8007714:	f000 f818 	bl	8007748 <_init>
 8007718:	1b64      	subs	r4, r4, r5
 800771a:	10a4      	asrs	r4, r4, #2
 800771c:	2600      	movs	r6, #0
 800771e:	42a6      	cmp	r6, r4
 8007720:	d105      	bne.n	800772e <__libc_init_array+0x2e>
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	f855 3b04 	ldr.w	r3, [r5], #4
 8007728:	4798      	blx	r3
 800772a:	3601      	adds	r6, #1
 800772c:	e7ee      	b.n	800770c <__libc_init_array+0xc>
 800772e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007732:	4798      	blx	r3
 8007734:	3601      	adds	r6, #1
 8007736:	e7f2      	b.n	800771e <__libc_init_array+0x1e>
 8007738:	080077a8 	.word	0x080077a8
 800773c:	080077a8 	.word	0x080077a8
 8007740:	080077a8 	.word	0x080077a8
 8007744:	080077ac 	.word	0x080077ac

08007748 <_init>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr

08007754 <_fini>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr
